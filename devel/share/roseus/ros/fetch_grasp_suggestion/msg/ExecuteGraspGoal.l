;; Auto-generated. Do not edit!


(when (boundp 'fetch_grasp_suggestion::ExecuteGraspGoal)
  (if (not (find-package "FETCH_GRASP_SUGGESTION"))
    (make-package "FETCH_GRASP_SUGGESTION"))
  (shadow 'ExecuteGraspGoal (find-package "FETCH_GRASP_SUGGESTION")))
(unless (find-package "FETCH_GRASP_SUGGESTION::EXECUTEGRASPGOAL")
  (make-package "FETCH_GRASP_SUGGESTION::EXECUTEGRASPGOAL"))

(in-package "ROS")
;;//! \htmlinclude ExecuteGraspGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass fetch_grasp_suggestion::ExecuteGraspGoal
  :super ros::object
  :slots (_grasp_pose _index ))

(defmethod fetch_grasp_suggestion::ExecuteGraspGoal
  (:init
   (&key
    ((:grasp_pose __grasp_pose) (instance geometry_msgs::PoseStamped :init))
    ((:index __index) 0)
    )
   (send-super :init)
   (setq _grasp_pose __grasp_pose)
   (setq _index (round __index))
   self)
  (:grasp_pose
   (&rest __grasp_pose)
   (if (keywordp (car __grasp_pose))
       (send* _grasp_pose __grasp_pose)
     (progn
       (if __grasp_pose (setq _grasp_pose (car __grasp_pose)))
       _grasp_pose)))
  (:index
   (&optional __index)
   (if __index (setq _index __index)) _index)
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/PoseStamped _grasp_pose
    (send _grasp_pose :serialization-length)
    ;; int32 _index
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/PoseStamped _grasp_pose
       (send _grasp_pose :serialize s)
     ;; int32 _index
       (write-long _index s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/PoseStamped _grasp_pose
     (send _grasp_pose :deserialize buf ptr-) (incf ptr- (send _grasp_pose :serialization-length))
   ;; int32 _index
     (setq _index (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get fetch_grasp_suggestion::ExecuteGraspGoal :md5sum-) "57c4f21389ca1ded500163dcb7f16308")
(setf (get fetch_grasp_suggestion::ExecuteGraspGoal :datatype-) "fetch_grasp_suggestion/ExecuteGraspGoal")
(setf (get fetch_grasp_suggestion::ExecuteGraspGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
geometry_msgs/PoseStamped grasp_pose   # pose to execute
int32 index                           # index of grasped object in the grasp selector object list

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :fetch_grasp_suggestion/ExecuteGraspGoal "57c4f21389ca1ded500163dcb7f16308")


