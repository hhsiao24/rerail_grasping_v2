;; Auto-generated. Do not edit!


(when (boundp 'rail_grasp_calculation_msgs::RankGraspsResult)
  (if (not (find-package "RAIL_GRASP_CALCULATION_MSGS"))
    (make-package "RAIL_GRASP_CALCULATION_MSGS"))
  (shadow 'RankGraspsResult (find-package "RAIL_GRASP_CALCULATION_MSGS")))
(unless (find-package "RAIL_GRASP_CALCULATION_MSGS::RANKGRASPSRESULT")
  (make-package "RAIL_GRASP_CALCULATION_MSGS::RANKGRASPSRESULT"))

(in-package "ROS")
;;//! \htmlinclude RankGraspsResult.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass rail_grasp_calculation_msgs::RankGraspsResult
  :super ros::object
  :slots (_graspList _heuristicList ))

(defmethod rail_grasp_calculation_msgs::RankGraspsResult
  (:init
   (&key
    ((:graspList __graspList) (instance geometry_msgs::PoseArray :init))
    ((:heuristicList __heuristicList) ())
    )
   (send-super :init)
   (setq _graspList __graspList)
   (setq _heuristicList __heuristicList)
   self)
  (:graspList
   (&rest __graspList)
   (if (keywordp (car __graspList))
       (send* _graspList __graspList)
     (progn
       (if __graspList (setq _graspList (car __graspList)))
       _graspList)))
  (:heuristicList
   (&rest __heuristicList)
   (if (keywordp (car __heuristicList))
       (send* _heuristicList __heuristicList)
     (progn
       (if __heuristicList (setq _heuristicList (car __heuristicList)))
       _heuristicList)))
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/PoseArray _graspList
    (send _graspList :serialization-length)
    ;; rail_grasp_calculation_msgs/Heuristics[] _heuristicList
    (apply #'+ (send-all _heuristicList :serialization-length)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/PoseArray _graspList
       (send _graspList :serialize s)
     ;; rail_grasp_calculation_msgs/Heuristics[] _heuristicList
     (write-long (length _heuristicList) s)
     (dolist (elem _heuristicList)
       (send elem :serialize s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/PoseArray _graspList
     (send _graspList :deserialize buf ptr-) (incf ptr- (send _graspList :serialization-length))
   ;; rail_grasp_calculation_msgs/Heuristics[] _heuristicList
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _heuristicList (let (r) (dotimes (i n) (push (instance rail_grasp_calculation_msgs::Heuristics :init) r)) r))
     (dolist (elem- _heuristicList)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;;
   self)
  )

(setf (get rail_grasp_calculation_msgs::RankGraspsResult :md5sum-) "5f9187dd1b6a9c84dcd15ec9513e86e9")
(setf (get rail_grasp_calculation_msgs::RankGraspsResult :datatype-) "rail_grasp_calculation_msgs/RankGraspsResult")
(setf (get rail_grasp_calculation_msgs::RankGraspsResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the result
geometry_msgs/PoseArray graspList                       # ranked list of grasps
rail_grasp_calculation_msgs/Heuristics[] heuristicList  # ranking heuristics, corresponds with grasps

================================================================================
MSG: geometry_msgs/PoseArray
# An array of poses with a header for global reference.

Header header

Pose[] poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: rail_grasp_calculation_msgs/Heuristics
float64[] heuristics

")



(provide :rail_grasp_calculation_msgs/RankGraspsResult "5f9187dd1b6a9c84dcd15ec9513e86e9")


