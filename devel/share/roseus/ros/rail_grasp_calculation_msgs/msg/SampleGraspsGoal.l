;; Auto-generated. Do not edit!


(when (boundp 'rail_grasp_calculation_msgs::SampleGraspsGoal)
  (if (not (find-package "RAIL_GRASP_CALCULATION_MSGS"))
    (make-package "RAIL_GRASP_CALCULATION_MSGS"))
  (shadow 'SampleGraspsGoal (find-package "RAIL_GRASP_CALCULATION_MSGS")))
(unless (find-package "RAIL_GRASP_CALCULATION_MSGS::SAMPLEGRASPSGOAL")
  (make-package "RAIL_GRASP_CALCULATION_MSGS::SAMPLEGRASPSGOAL"))

(in-package "ROS")
;;//! \htmlinclude SampleGraspsGoal.msg.html
(if (not (find-package "SENSOR_MSGS"))
  (ros::roseus-add-msgs "sensor_msgs"))


(defclass rail_grasp_calculation_msgs::SampleGraspsGoal
  :super ros::object
  :slots (_cloud _workspace ))

(defmethod rail_grasp_calculation_msgs::SampleGraspsGoal
  (:init
   (&key
    ((:cloud __cloud) (instance sensor_msgs::PointCloud2 :init))
    ((:workspace __workspace) (instance rail_grasp_calculation_msgs::Workspace :init))
    )
   (send-super :init)
   (setq _cloud __cloud)
   (setq _workspace __workspace)
   self)
  (:cloud
   (&rest __cloud)
   (if (keywordp (car __cloud))
       (send* _cloud __cloud)
     (progn
       (if __cloud (setq _cloud (car __cloud)))
       _cloud)))
  (:workspace
   (&rest __workspace)
   (if (keywordp (car __workspace))
       (send* _workspace __workspace)
     (progn
       (if __workspace (setq _workspace (car __workspace)))
       _workspace)))
  (:serialization-length
   ()
   (+
    ;; sensor_msgs/PointCloud2 _cloud
    (send _cloud :serialization-length)
    ;; rail_grasp_calculation_msgs/Workspace _workspace
    (send _workspace :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; sensor_msgs/PointCloud2 _cloud
       (send _cloud :serialize s)
     ;; rail_grasp_calculation_msgs/Workspace _workspace
       (send _workspace :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; sensor_msgs/PointCloud2 _cloud
     (send _cloud :deserialize buf ptr-) (incf ptr- (send _cloud :serialization-length))
   ;; rail_grasp_calculation_msgs/Workspace _workspace
     (send _workspace :deserialize buf ptr-) (incf ptr- (send _workspace :serialization-length))
   ;;
   self)
  )

(setf (get rail_grasp_calculation_msgs::SampleGraspsGoal :md5sum-) "1dbde745e80ccad349255935cd4d9b88")
(setf (get rail_grasp_calculation_msgs::SampleGraspsGoal :datatype-) "rail_grasp_calculation_msgs/SampleGraspsGoal")
(setf (get rail_grasp_calculation_msgs::SampleGraspsGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
sensor_msgs/PointCloud2 cloud                    # point cloud from which to sample grasps
rail_grasp_calculation_msgs/Workspace workspace  # grasp sampling workspace

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the \"fields\" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: rail_grasp_calculation_msgs/Workspace
uint8 WORKSPACE_VOLUME = 0
uint8 CENTERED_ROI = 1

uint8 mode                              # workspace definition mode, either WORKSPACE_VOLUME or CENTERED_ROI
float64 x_min                           # minimum x bound of rectangular workspace (for WORKSPACE_VOLUME only)
float64 x_max                           # maximum x bound of rectangular workspace (for WORKSPACE_VOLUME only)
float64 y_min                           # minimum y bound of rectangular workspace (for WORKSPACE_VOLUME only)
float64 y_max                           # maximum y bound of rectangular workspace (for WORKSPACE_VOLUME only)
float64 z_min                           # minimum z bound of rectangular workspace (for WORKSPACE_VOLUME only)
float64 z_max                           # maximum z bound of rectangular workspace (for WORKSPACE_VOLUME only)
geometry_msgs/Point roiCenter           # workspace center point (for CENTERED_ROI only)
geometry_msgs/Vector3 roiDimensions     # workspace bounds (for CENTERED_ROI only)
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
")



(provide :rail_grasp_calculation_msgs/SampleGraspsGoal "1dbde745e80ccad349255935cd4d9b88")


