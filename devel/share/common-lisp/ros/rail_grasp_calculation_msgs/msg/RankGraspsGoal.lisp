; Auto-generated. Do not edit!


(cl:in-package rail_grasp_calculation_msgs-msg)


;//! \htmlinclude RankGraspsGoal.msg.html

(cl:defclass <RankGraspsGoal> (roslisp-msg-protocol:ros-message)
  ((graspList
    :reader graspList
    :initarg :graspList
    :type geometry_msgs-msg:PoseArray
    :initform (cl:make-instance 'geometry_msgs-msg:PoseArray))
   (sceneCloud
    :reader sceneCloud
    :initarg :sceneCloud
    :type sensor_msgs-msg:PointCloud2
    :initform (cl:make-instance 'sensor_msgs-msg:PointCloud2))
   (segmentedCloud
    :reader segmentedCloud
    :initarg :segmentedCloud
    :type sensor_msgs-msg:PointCloud2
    :initform (cl:make-instance 'sensor_msgs-msg:PointCloud2))
   (workspace
    :reader workspace
    :initarg :workspace
    :type rail_grasp_calculation_msgs-msg:Workspace
    :initform (cl:make-instance 'rail_grasp_calculation_msgs-msg:Workspace)))
)

(cl:defclass RankGraspsGoal (<RankGraspsGoal>)
  ())

(cl:defmethod cl:initialize-instance :after ((m <RankGraspsGoal>) cl:&rest args)
  (cl:declare (cl:ignorable args))
  (cl:unless (cl:typep m 'RankGraspsGoal)
    (roslisp-msg-protocol:msg-deprecation-warning "using old message class name rail_grasp_calculation_msgs-msg:<RankGraspsGoal> is deprecated: use rail_grasp_calculation_msgs-msg:RankGraspsGoal instead.")))

(cl:ensure-generic-function 'graspList-val :lambda-list '(m))
(cl:defmethod graspList-val ((m <RankGraspsGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rail_grasp_calculation_msgs-msg:graspList-val is deprecated.  Use rail_grasp_calculation_msgs-msg:graspList instead.")
  (graspList m))

(cl:ensure-generic-function 'sceneCloud-val :lambda-list '(m))
(cl:defmethod sceneCloud-val ((m <RankGraspsGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rail_grasp_calculation_msgs-msg:sceneCloud-val is deprecated.  Use rail_grasp_calculation_msgs-msg:sceneCloud instead.")
  (sceneCloud m))

(cl:ensure-generic-function 'segmentedCloud-val :lambda-list '(m))
(cl:defmethod segmentedCloud-val ((m <RankGraspsGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rail_grasp_calculation_msgs-msg:segmentedCloud-val is deprecated.  Use rail_grasp_calculation_msgs-msg:segmentedCloud instead.")
  (segmentedCloud m))

(cl:ensure-generic-function 'workspace-val :lambda-list '(m))
(cl:defmethod workspace-val ((m <RankGraspsGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rail_grasp_calculation_msgs-msg:workspace-val is deprecated.  Use rail_grasp_calculation_msgs-msg:workspace instead.")
  (workspace m))
(cl:defmethod roslisp-msg-protocol:serialize ((msg <RankGraspsGoal>) ostream)
  "Serializes a message object of type '<RankGraspsGoal>"
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'graspList) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'sceneCloud) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'segmentedCloud) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'workspace) ostream)
)
(cl:defmethod roslisp-msg-protocol:deserialize ((msg <RankGraspsGoal>) istream)
  "Deserializes a message object of type '<RankGraspsGoal>"
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'graspList) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'sceneCloud) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'segmentedCloud) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'workspace) istream)
  msg
)
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<RankGraspsGoal>)))
  "Returns string type for a message object of type '<RankGraspsGoal>"
  "rail_grasp_calculation_msgs/RankGraspsGoal")
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'RankGraspsGoal)))
  "Returns string type for a message object of type 'RankGraspsGoal"
  "rail_grasp_calculation_msgs/RankGraspsGoal")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<RankGraspsGoal>)))
  "Returns md5sum for a message object of type '<RankGraspsGoal>"
  "0e590bb1f43077b5b1f047d5b255cf91")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'RankGraspsGoal)))
  "Returns md5sum for a message object of type 'RankGraspsGoal"
  "0e590bb1f43077b5b1f047d5b255cf91")
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<RankGraspsGoal>)))
  "Returns full string definition for message of type '<RankGraspsGoal>"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# Define the goal~%~%# Required: list of sampled grasps, to be clustered and ranked~%geometry_msgs/PoseArray graspList~%~%# Required: complete point cloud of the environment~%sensor_msgs/PointCloud2 sceneCloud~%~%# Optional: segmented point cloud of an object of interest; required for object-based grasp ranking~%sensor_msgs/PointCloud2 segmentedCloud~%~%# Optional: workspace for grasp calculation; required for point-of-interest grasp ranking~%rail_grasp_calculation_msgs/Workspace workspace         # Note: this is defined in the frame of the sceneCloud~%~%~%================================================================================~%MSG: geometry_msgs/PoseArray~%# An array of poses with a header for global reference.~%~%Header header~%~%Pose[] poses~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%================================================================================~%MSG: geometry_msgs/Pose~%# A representation of pose in free space, composed of position and orientation. ~%Point position~%Quaternion orientation~%~%================================================================================~%MSG: geometry_msgs/Point~%# This contains the position of a point in free space~%float64 x~%float64 y~%float64 z~%~%================================================================================~%MSG: geometry_msgs/Quaternion~%# This represents an orientation in free space in quaternion form.~%~%float64 x~%float64 y~%float64 z~%float64 w~%~%================================================================================~%MSG: sensor_msgs/PointCloud2~%# This message holds a collection of N-dimensional points, which may~%# contain additional information such as normals, intensity, etc. The~%# point data is stored as a binary blob, its layout described by the~%# contents of the \"fields\" array.~%~%# The point cloud data may be organized 2d (image-like) or 1d~%# (unordered). Point clouds organized as 2d images may be produced by~%# camera depth sensors such as stereo or time-of-flight.~%~%# Time of sensor data acquisition, and the coordinate frame ID (for 3d~%# points).~%Header header~%~%# 2D structure of the point cloud. If the cloud is unordered, height is~%# 1 and width is the length of the point cloud.~%uint32 height~%uint32 width~%~%# Describes the channels and their layout in the binary data blob.~%PointField[] fields~%~%bool    is_bigendian # Is this data bigendian?~%uint32  point_step   # Length of a point in bytes~%uint32  row_step     # Length of a row in bytes~%uint8[] data         # Actual point data, size is (row_step*height)~%~%bool is_dense        # True if there are no invalid points~%~%================================================================================~%MSG: sensor_msgs/PointField~%# This message holds the description of one point entry in the~%# PointCloud2 message format.~%uint8 INT8    = 1~%uint8 UINT8   = 2~%uint8 INT16   = 3~%uint8 UINT16  = 4~%uint8 INT32   = 5~%uint8 UINT32  = 6~%uint8 FLOAT32 = 7~%uint8 FLOAT64 = 8~%~%string name      # Name of field~%uint32 offset    # Offset from start of point struct~%uint8  datatype  # Datatype enumeration, see above~%uint32 count     # How many elements in the field~%~%================================================================================~%MSG: rail_grasp_calculation_msgs/Workspace~%uint8 WORKSPACE_VOLUME = 0~%uint8 CENTERED_ROI = 1~%~%uint8 mode                              # workspace definition mode, either WORKSPACE_VOLUME or CENTERED_ROI~%float64 x_min                           # minimum x bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 x_max                           # maximum x bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 y_min                           # minimum y bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 y_max                           # maximum y bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 z_min                           # minimum z bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 z_max                           # maximum z bound of rectangular workspace (for WORKSPACE_VOLUME only)~%geometry_msgs/Point roiCenter           # workspace center point (for CENTERED_ROI only)~%geometry_msgs/Vector3 roiDimensions     # workspace bounds (for CENTERED_ROI only)~%================================================================================~%MSG: geometry_msgs/Vector3~%# This represents a vector in free space. ~%# It is only meant to represent a direction. Therefore, it does not~%# make sense to apply a translation to it (e.g., when applying a ~%# generic rigid transformation to a Vector3, tf2 will only apply the~%# rotation). If you want your data to be translatable too, use the~%# geometry_msgs/Point message instead.~%~%float64 x~%float64 y~%float64 z~%~%"))
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'RankGraspsGoal)))
  "Returns full string definition for message of type 'RankGraspsGoal"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# Define the goal~%~%# Required: list of sampled grasps, to be clustered and ranked~%geometry_msgs/PoseArray graspList~%~%# Required: complete point cloud of the environment~%sensor_msgs/PointCloud2 sceneCloud~%~%# Optional: segmented point cloud of an object of interest; required for object-based grasp ranking~%sensor_msgs/PointCloud2 segmentedCloud~%~%# Optional: workspace for grasp calculation; required for point-of-interest grasp ranking~%rail_grasp_calculation_msgs/Workspace workspace         # Note: this is defined in the frame of the sceneCloud~%~%~%================================================================================~%MSG: geometry_msgs/PoseArray~%# An array of poses with a header for global reference.~%~%Header header~%~%Pose[] poses~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%================================================================================~%MSG: geometry_msgs/Pose~%# A representation of pose in free space, composed of position and orientation. ~%Point position~%Quaternion orientation~%~%================================================================================~%MSG: geometry_msgs/Point~%# This contains the position of a point in free space~%float64 x~%float64 y~%float64 z~%~%================================================================================~%MSG: geometry_msgs/Quaternion~%# This represents an orientation in free space in quaternion form.~%~%float64 x~%float64 y~%float64 z~%float64 w~%~%================================================================================~%MSG: sensor_msgs/PointCloud2~%# This message holds a collection of N-dimensional points, which may~%# contain additional information such as normals, intensity, etc. The~%# point data is stored as a binary blob, its layout described by the~%# contents of the \"fields\" array.~%~%# The point cloud data may be organized 2d (image-like) or 1d~%# (unordered). Point clouds organized as 2d images may be produced by~%# camera depth sensors such as stereo or time-of-flight.~%~%# Time of sensor data acquisition, and the coordinate frame ID (for 3d~%# points).~%Header header~%~%# 2D structure of the point cloud. If the cloud is unordered, height is~%# 1 and width is the length of the point cloud.~%uint32 height~%uint32 width~%~%# Describes the channels and their layout in the binary data blob.~%PointField[] fields~%~%bool    is_bigendian # Is this data bigendian?~%uint32  point_step   # Length of a point in bytes~%uint32  row_step     # Length of a row in bytes~%uint8[] data         # Actual point data, size is (row_step*height)~%~%bool is_dense        # True if there are no invalid points~%~%================================================================================~%MSG: sensor_msgs/PointField~%# This message holds the description of one point entry in the~%# PointCloud2 message format.~%uint8 INT8    = 1~%uint8 UINT8   = 2~%uint8 INT16   = 3~%uint8 UINT16  = 4~%uint8 INT32   = 5~%uint8 UINT32  = 6~%uint8 FLOAT32 = 7~%uint8 FLOAT64 = 8~%~%string name      # Name of field~%uint32 offset    # Offset from start of point struct~%uint8  datatype  # Datatype enumeration, see above~%uint32 count     # How many elements in the field~%~%================================================================================~%MSG: rail_grasp_calculation_msgs/Workspace~%uint8 WORKSPACE_VOLUME = 0~%uint8 CENTERED_ROI = 1~%~%uint8 mode                              # workspace definition mode, either WORKSPACE_VOLUME or CENTERED_ROI~%float64 x_min                           # minimum x bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 x_max                           # maximum x bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 y_min                           # minimum y bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 y_max                           # maximum y bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 z_min                           # minimum z bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 z_max                           # maximum z bound of rectangular workspace (for WORKSPACE_VOLUME only)~%geometry_msgs/Point roiCenter           # workspace center point (for CENTERED_ROI only)~%geometry_msgs/Vector3 roiDimensions     # workspace bounds (for CENTERED_ROI only)~%================================================================================~%MSG: geometry_msgs/Vector3~%# This represents a vector in free space. ~%# It is only meant to represent a direction. Therefore, it does not~%# make sense to apply a translation to it (e.g., when applying a ~%# generic rigid transformation to a Vector3, tf2 will only apply the~%# rotation). If you want your data to be translatable too, use the~%# geometry_msgs/Point message instead.~%~%float64 x~%float64 y~%float64 z~%~%"))
(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <RankGraspsGoal>))
  (cl:+ 0
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'graspList))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'sceneCloud))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'segmentedCloud))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'workspace))
))
(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <RankGraspsGoal>))
  "Converts a ROS message object to a list"
  (cl:list 'RankGraspsGoal
    (cl:cons ':graspList (graspList msg))
    (cl:cons ':sceneCloud (sceneCloud msg))
    (cl:cons ':segmentedCloud (segmentedCloud msg))
    (cl:cons ':workspace (workspace msg))
))
