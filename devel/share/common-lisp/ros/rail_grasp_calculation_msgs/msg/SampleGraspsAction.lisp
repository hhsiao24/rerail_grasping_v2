; Auto-generated. Do not edit!


(cl:in-package rail_grasp_calculation_msgs-msg)


;//! \htmlinclude SampleGraspsAction.msg.html

(cl:defclass <SampleGraspsAction> (roslisp-msg-protocol:ros-message)
  ((action_goal
    :reader action_goal
    :initarg :action_goal
    :type rail_grasp_calculation_msgs-msg:SampleGraspsActionGoal
    :initform (cl:make-instance 'rail_grasp_calculation_msgs-msg:SampleGraspsActionGoal))
   (action_result
    :reader action_result
    :initarg :action_result
    :type rail_grasp_calculation_msgs-msg:SampleGraspsActionResult
    :initform (cl:make-instance 'rail_grasp_calculation_msgs-msg:SampleGraspsActionResult))
   (action_feedback
    :reader action_feedback
    :initarg :action_feedback
    :type rail_grasp_calculation_msgs-msg:SampleGraspsActionFeedback
    :initform (cl:make-instance 'rail_grasp_calculation_msgs-msg:SampleGraspsActionFeedback)))
)

(cl:defclass SampleGraspsAction (<SampleGraspsAction>)
  ())

(cl:defmethod cl:initialize-instance :after ((m <SampleGraspsAction>) cl:&rest args)
  (cl:declare (cl:ignorable args))
  (cl:unless (cl:typep m 'SampleGraspsAction)
    (roslisp-msg-protocol:msg-deprecation-warning "using old message class name rail_grasp_calculation_msgs-msg:<SampleGraspsAction> is deprecated: use rail_grasp_calculation_msgs-msg:SampleGraspsAction instead.")))

(cl:ensure-generic-function 'action_goal-val :lambda-list '(m))
(cl:defmethod action_goal-val ((m <SampleGraspsAction>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rail_grasp_calculation_msgs-msg:action_goal-val is deprecated.  Use rail_grasp_calculation_msgs-msg:action_goal instead.")
  (action_goal m))

(cl:ensure-generic-function 'action_result-val :lambda-list '(m))
(cl:defmethod action_result-val ((m <SampleGraspsAction>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rail_grasp_calculation_msgs-msg:action_result-val is deprecated.  Use rail_grasp_calculation_msgs-msg:action_result instead.")
  (action_result m))

(cl:ensure-generic-function 'action_feedback-val :lambda-list '(m))
(cl:defmethod action_feedback-val ((m <SampleGraspsAction>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader rail_grasp_calculation_msgs-msg:action_feedback-val is deprecated.  Use rail_grasp_calculation_msgs-msg:action_feedback instead.")
  (action_feedback m))
(cl:defmethod roslisp-msg-protocol:serialize ((msg <SampleGraspsAction>) ostream)
  "Serializes a message object of type '<SampleGraspsAction>"
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'action_goal) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'action_result) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'action_feedback) ostream)
)
(cl:defmethod roslisp-msg-protocol:deserialize ((msg <SampleGraspsAction>) istream)
  "Deserializes a message object of type '<SampleGraspsAction>"
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'action_goal) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'action_result) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'action_feedback) istream)
  msg
)
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<SampleGraspsAction>)))
  "Returns string type for a message object of type '<SampleGraspsAction>"
  "rail_grasp_calculation_msgs/SampleGraspsAction")
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'SampleGraspsAction)))
  "Returns string type for a message object of type 'SampleGraspsAction"
  "rail_grasp_calculation_msgs/SampleGraspsAction")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<SampleGraspsAction>)))
  "Returns md5sum for a message object of type '<SampleGraspsAction>"
  "396a367a9bdb1f4f74946fec47f96c00")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'SampleGraspsAction)))
  "Returns md5sum for a message object of type 'SampleGraspsAction"
  "396a367a9bdb1f4f74946fec47f96c00")
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<SampleGraspsAction>)))
  "Returns full string definition for message of type '<SampleGraspsAction>"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%SampleGraspsActionGoal action_goal~%SampleGraspsActionResult action_result~%SampleGraspsActionFeedback action_feedback~%~%================================================================================~%MSG: rail_grasp_calculation_msgs/SampleGraspsActionGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalID goal_id~%SampleGraspsGoal goal~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%================================================================================~%MSG: actionlib_msgs/GoalID~%# The stamp should store the time at which this goal was requested.~%# It is used by an action server when it tries to preempt all~%# goals that were requested before a certain time~%time stamp~%~%# The id provides a way to associate feedback and~%# result message with specific goal requests. The id~%# specified must be unique.~%string id~%~%~%================================================================================~%MSG: rail_grasp_calculation_msgs/SampleGraspsGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# Define the goal~%sensor_msgs/PointCloud2 cloud                    # point cloud from which to sample grasps~%rail_grasp_calculation_msgs/Workspace workspace  # grasp sampling workspace~%~%================================================================================~%MSG: sensor_msgs/PointCloud2~%# This message holds a collection of N-dimensional points, which may~%# contain additional information such as normals, intensity, etc. The~%# point data is stored as a binary blob, its layout described by the~%# contents of the \"fields\" array.~%~%# The point cloud data may be organized 2d (image-like) or 1d~%# (unordered). Point clouds organized as 2d images may be produced by~%# camera depth sensors such as stereo or time-of-flight.~%~%# Time of sensor data acquisition, and the coordinate frame ID (for 3d~%# points).~%Header header~%~%# 2D structure of the point cloud. If the cloud is unordered, height is~%# 1 and width is the length of the point cloud.~%uint32 height~%uint32 width~%~%# Describes the channels and their layout in the binary data blob.~%PointField[] fields~%~%bool    is_bigendian # Is this data bigendian?~%uint32  point_step   # Length of a point in bytes~%uint32  row_step     # Length of a row in bytes~%uint8[] data         # Actual point data, size is (row_step*height)~%~%bool is_dense        # True if there are no invalid points~%~%================================================================================~%MSG: sensor_msgs/PointField~%# This message holds the description of one point entry in the~%# PointCloud2 message format.~%uint8 INT8    = 1~%uint8 UINT8   = 2~%uint8 INT16   = 3~%uint8 UINT16  = 4~%uint8 INT32   = 5~%uint8 UINT32  = 6~%uint8 FLOAT32 = 7~%uint8 FLOAT64 = 8~%~%string name      # Name of field~%uint32 offset    # Offset from start of point struct~%uint8  datatype  # Datatype enumeration, see above~%uint32 count     # How many elements in the field~%~%================================================================================~%MSG: rail_grasp_calculation_msgs/Workspace~%uint8 WORKSPACE_VOLUME = 0~%uint8 CENTERED_ROI = 1~%~%uint8 mode                              # workspace definition mode, either WORKSPACE_VOLUME or CENTERED_ROI~%float64 x_min                           # minimum x bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 x_max                           # maximum x bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 y_min                           # minimum y bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 y_max                           # maximum y bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 z_min                           # minimum z bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 z_max                           # maximum z bound of rectangular workspace (for WORKSPACE_VOLUME only)~%geometry_msgs/Point roiCenter           # workspace center point (for CENTERED_ROI only)~%geometry_msgs/Vector3 roiDimensions     # workspace bounds (for CENTERED_ROI only)~%================================================================================~%MSG: geometry_msgs/Point~%# This contains the position of a point in free space~%float64 x~%float64 y~%float64 z~%~%================================================================================~%MSG: geometry_msgs/Vector3~%# This represents a vector in free space. ~%# It is only meant to represent a direction. Therefore, it does not~%# make sense to apply a translation to it (e.g., when applying a ~%# generic rigid transformation to a Vector3, tf2 will only apply the~%# rotation). If you want your data to be translatable too, use the~%# geometry_msgs/Point message instead.~%~%float64 x~%float64 y~%float64 z~%================================================================================~%MSG: rail_grasp_calculation_msgs/SampleGraspsActionResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%SampleGraspsResult result~%~%================================================================================~%MSG: actionlib_msgs/GoalStatus~%GoalID goal_id~%uint8 status~%uint8 PENDING         = 0   # The goal has yet to be processed by the action server~%uint8 ACTIVE          = 1   # The goal is currently being processed by the action server~%uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing~%                            #   and has since completed its execution (Terminal State)~%uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)~%uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due~%                            #    to some failure (Terminal State)~%uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,~%                            #    because the goal was unattainable or invalid (Terminal State)~%uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing~%                            #    and has not yet completed execution~%uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,~%                            #    but the action server has not yet confirmed that the goal is canceled~%uint8 RECALLED        = 8   # The goal received a cancel request before it started executing~%                            #    and was successfully cancelled (Terminal State)~%uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be~%                            #    sent over the wire by an action server~%~%#Allow for the user to associate a string with GoalStatus for debugging~%string text~%~%~%================================================================================~%MSG: rail_grasp_calculation_msgs/SampleGraspsResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# Define the result~%geometry_msgs/PoseArray graspList          # list of sampled antipodal grasps~%~%================================================================================~%MSG: geometry_msgs/PoseArray~%# An array of poses with a header for global reference.~%~%Header header~%~%Pose[] poses~%~%================================================================================~%MSG: geometry_msgs/Pose~%# A representation of pose in free space, composed of position and orientation. ~%Point position~%Quaternion orientation~%~%================================================================================~%MSG: geometry_msgs/Quaternion~%# This represents an orientation in free space in quaternion form.~%~%float64 x~%float64 y~%float64 z~%float64 w~%~%================================================================================~%MSG: rail_grasp_calculation_msgs/SampleGraspsActionFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%SampleGraspsFeedback feedback~%~%================================================================================~%MSG: rail_grasp_calculation_msgs/SampleGraspsFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# Define a feedback message~%string currentAction                       # text feedback indicating what's currently being executed~%~%~%~%"))
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'SampleGraspsAction)))
  "Returns full string definition for message of type 'SampleGraspsAction"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%SampleGraspsActionGoal action_goal~%SampleGraspsActionResult action_result~%SampleGraspsActionFeedback action_feedback~%~%================================================================================~%MSG: rail_grasp_calculation_msgs/SampleGraspsActionGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalID goal_id~%SampleGraspsGoal goal~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%================================================================================~%MSG: actionlib_msgs/GoalID~%# The stamp should store the time at which this goal was requested.~%# It is used by an action server when it tries to preempt all~%# goals that were requested before a certain time~%time stamp~%~%# The id provides a way to associate feedback and~%# result message with specific goal requests. The id~%# specified must be unique.~%string id~%~%~%================================================================================~%MSG: rail_grasp_calculation_msgs/SampleGraspsGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# Define the goal~%sensor_msgs/PointCloud2 cloud                    # point cloud from which to sample grasps~%rail_grasp_calculation_msgs/Workspace workspace  # grasp sampling workspace~%~%================================================================================~%MSG: sensor_msgs/PointCloud2~%# This message holds a collection of N-dimensional points, which may~%# contain additional information such as normals, intensity, etc. The~%# point data is stored as a binary blob, its layout described by the~%# contents of the \"fields\" array.~%~%# The point cloud data may be organized 2d (image-like) or 1d~%# (unordered). Point clouds organized as 2d images may be produced by~%# camera depth sensors such as stereo or time-of-flight.~%~%# Time of sensor data acquisition, and the coordinate frame ID (for 3d~%# points).~%Header header~%~%# 2D structure of the point cloud. If the cloud is unordered, height is~%# 1 and width is the length of the point cloud.~%uint32 height~%uint32 width~%~%# Describes the channels and their layout in the binary data blob.~%PointField[] fields~%~%bool    is_bigendian # Is this data bigendian?~%uint32  point_step   # Length of a point in bytes~%uint32  row_step     # Length of a row in bytes~%uint8[] data         # Actual point data, size is (row_step*height)~%~%bool is_dense        # True if there are no invalid points~%~%================================================================================~%MSG: sensor_msgs/PointField~%# This message holds the description of one point entry in the~%# PointCloud2 message format.~%uint8 INT8    = 1~%uint8 UINT8   = 2~%uint8 INT16   = 3~%uint8 UINT16  = 4~%uint8 INT32   = 5~%uint8 UINT32  = 6~%uint8 FLOAT32 = 7~%uint8 FLOAT64 = 8~%~%string name      # Name of field~%uint32 offset    # Offset from start of point struct~%uint8  datatype  # Datatype enumeration, see above~%uint32 count     # How many elements in the field~%~%================================================================================~%MSG: rail_grasp_calculation_msgs/Workspace~%uint8 WORKSPACE_VOLUME = 0~%uint8 CENTERED_ROI = 1~%~%uint8 mode                              # workspace definition mode, either WORKSPACE_VOLUME or CENTERED_ROI~%float64 x_min                           # minimum x bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 x_max                           # maximum x bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 y_min                           # minimum y bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 y_max                           # maximum y bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 z_min                           # minimum z bound of rectangular workspace (for WORKSPACE_VOLUME only)~%float64 z_max                           # maximum z bound of rectangular workspace (for WORKSPACE_VOLUME only)~%geometry_msgs/Point roiCenter           # workspace center point (for CENTERED_ROI only)~%geometry_msgs/Vector3 roiDimensions     # workspace bounds (for CENTERED_ROI only)~%================================================================================~%MSG: geometry_msgs/Point~%# This contains the position of a point in free space~%float64 x~%float64 y~%float64 z~%~%================================================================================~%MSG: geometry_msgs/Vector3~%# This represents a vector in free space. ~%# It is only meant to represent a direction. Therefore, it does not~%# make sense to apply a translation to it (e.g., when applying a ~%# generic rigid transformation to a Vector3, tf2 will only apply the~%# rotation). If you want your data to be translatable too, use the~%# geometry_msgs/Point message instead.~%~%float64 x~%float64 y~%float64 z~%================================================================================~%MSG: rail_grasp_calculation_msgs/SampleGraspsActionResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%SampleGraspsResult result~%~%================================================================================~%MSG: actionlib_msgs/GoalStatus~%GoalID goal_id~%uint8 status~%uint8 PENDING         = 0   # The goal has yet to be processed by the action server~%uint8 ACTIVE          = 1   # The goal is currently being processed by the action server~%uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing~%                            #   and has since completed its execution (Terminal State)~%uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)~%uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due~%                            #    to some failure (Terminal State)~%uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,~%                            #    because the goal was unattainable or invalid (Terminal State)~%uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing~%                            #    and has not yet completed execution~%uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,~%                            #    but the action server has not yet confirmed that the goal is canceled~%uint8 RECALLED        = 8   # The goal received a cancel request before it started executing~%                            #    and was successfully cancelled (Terminal State)~%uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be~%                            #    sent over the wire by an action server~%~%#Allow for the user to associate a string with GoalStatus for debugging~%string text~%~%~%================================================================================~%MSG: rail_grasp_calculation_msgs/SampleGraspsResult~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# Define the result~%geometry_msgs/PoseArray graspList          # list of sampled antipodal grasps~%~%================================================================================~%MSG: geometry_msgs/PoseArray~%# An array of poses with a header for global reference.~%~%Header header~%~%Pose[] poses~%~%================================================================================~%MSG: geometry_msgs/Pose~%# A representation of pose in free space, composed of position and orientation. ~%Point position~%Quaternion orientation~%~%================================================================================~%MSG: geometry_msgs/Quaternion~%# This represents an orientation in free space in quaternion form.~%~%float64 x~%float64 y~%float64 z~%float64 w~%~%================================================================================~%MSG: rail_grasp_calculation_msgs/SampleGraspsActionFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalStatus status~%SampleGraspsFeedback feedback~%~%================================================================================~%MSG: rail_grasp_calculation_msgs/SampleGraspsFeedback~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# Define a feedback message~%string currentAction                       # text feedback indicating what's currently being executed~%~%~%~%"))
(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <SampleGraspsAction>))
  (cl:+ 0
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'action_goal))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'action_result))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'action_feedback))
))
(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <SampleGraspsAction>))
  "Converts a ROS message object to a list"
  (cl:list 'SampleGraspsAction
    (cl:cons ':action_goal (action_goal msg))
    (cl:cons ':action_result (action_result msg))
    (cl:cons ':action_feedback (action_feedback msg))
))
