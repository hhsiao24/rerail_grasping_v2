// Auto-generated. Do not edit!

// (in-package rail_manipulation_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class MoveToJointPoseGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.joints = null;
      this.planningTime = null;
    }
    else {
      if (initObj.hasOwnProperty('joints')) {
        this.joints = initObj.joints
      }
      else {
        this.joints = [];
      }
      if (initObj.hasOwnProperty('planningTime')) {
        this.planningTime = initObj.planningTime
      }
      else {
        this.planningTime = 0.0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type MoveToJointPoseGoal
    // Serialize message field [joints]
    bufferOffset = _arraySerializer.float32(obj.joints, buffer, bufferOffset, null);
    // Serialize message field [planningTime]
    bufferOffset = _serializer.float32(obj.planningTime, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type MoveToJointPoseGoal
    let len;
    let data = new MoveToJointPoseGoal(null);
    // Deserialize message field [joints]
    data.joints = _arrayDeserializer.float32(buffer, bufferOffset, null)
    // Deserialize message field [planningTime]
    data.planningTime = _deserializer.float32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += 4 * object.joints.length;
    return length + 8;
  }

  static datatype() {
    // Returns string type for a message object
    return 'rail_manipulation_msgs/MoveToJointPoseGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '290df0c43aba8e112c66bc523496042e';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    float32[] joints      # Full set of arm joint angles as a planning goal
    float32 planningTime  # Maximum planning time, defaults to 5 seconds if unset
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new MoveToJointPoseGoal(null);
    if (msg.joints !== undefined) {
      resolved.joints = msg.joints;
    }
    else {
      resolved.joints = []
    }

    if (msg.planningTime !== undefined) {
      resolved.planningTime = msg.planningTime;
    }
    else {
      resolved.planningTime = 0.0
    }

    return resolved;
    }
};

module.exports = MoveToJointPoseGoal;
