// Generated by gencpp from file rail_manipulation_msgs/GripperGoal.msg
// DO NOT EDIT!


#ifndef RAIL_MANIPULATION_MSGS_MESSAGE_GRIPPERGOAL_H
#define RAIL_MANIPULATION_MSGS_MESSAGE_GRIPPERGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rail_manipulation_msgs
{
template <class ContainerAllocator>
struct GripperGoal_
{
  typedef GripperGoal_<ContainerAllocator> Type;

  GripperGoal_()
    : close(false)
    , speed(0.0)
    , force(0.0)  {
    }
  GripperGoal_(const ContainerAllocator& _alloc)
    : close(false)
    , speed(0.0)
    , force(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _close_type;
  _close_type close;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _force_type;
  _force_type force;





  typedef boost::shared_ptr< ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator> const> ConstPtr;

}; // struct GripperGoal_

typedef ::rail_manipulation_msgs::GripperGoal_<std::allocator<void> > GripperGoal;

typedef boost::shared_ptr< ::rail_manipulation_msgs::GripperGoal > GripperGoalPtr;
typedef boost::shared_ptr< ::rail_manipulation_msgs::GripperGoal const> GripperGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator1> & lhs, const ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator2> & rhs)
{
  return lhs.close == rhs.close &&
    lhs.speed == rhs.speed &&
    lhs.force == rhs.force;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator1> & lhs, const ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rail_manipulation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ba8c137093baeeb86c98d9ca45e7e1d4";
  }

  static const char* value(const ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xba8c137093baeeb8ULL;
  static const uint64_t static_value2 = 0x6c98d9ca45e7e1d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rail_manipulation_msgs/GripperGoal";
  }

  static const char* value(const ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"bool close      # True for close gripper, false for open gripper\n"
"float64 speed   # Speed the gripper should move at, in the gripper's preferred units\n"
"float64 force   # Force the gripper should move at, in the gripper's preferred units\n"
;
  }

  static const char* value(const ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.close);
      stream.next(m.speed);
      stream.next(m.force);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rail_manipulation_msgs::GripperGoal_<ContainerAllocator>& v)
  {
    s << indent << "close: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.close);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "force: ";
    Printer<double>::stream(s, indent + "  ", v.force);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAIL_MANIPULATION_MSGS_MESSAGE_GRIPPERGOAL_H
