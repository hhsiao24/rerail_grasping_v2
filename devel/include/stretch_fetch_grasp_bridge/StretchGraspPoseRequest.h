// Generated by gencpp from file stretch_fetch_grasp_bridge/StretchGraspPoseRequest.msg
// DO NOT EDIT!


#ifndef STRETCH_FETCH_GRASP_BRIDGE_MESSAGE_STRETCHGRASPPOSEREQUEST_H
#define STRETCH_FETCH_GRASP_BRIDGE_MESSAGE_STRETCHGRASPPOSEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace stretch_fetch_grasp_bridge
{
template <class ContainerAllocator>
struct StretchGraspPoseRequest_
{
  typedef StretchGraspPoseRequest_<ContainerAllocator> Type;

  StretchGraspPoseRequest_()
    : segment_no(0)
    , rank_no(0)  {
    }
  StretchGraspPoseRequest_(const ContainerAllocator& _alloc)
    : segment_no(0)
    , rank_no(0)  {
  (void)_alloc;
    }



   typedef int64_t _segment_no_type;
  _segment_no_type segment_no;

   typedef int64_t _rank_no_type;
  _rank_no_type rank_no;





  typedef boost::shared_ptr< ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StretchGraspPoseRequest_

typedef ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<std::allocator<void> > StretchGraspPoseRequest;

typedef boost::shared_ptr< ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest > StretchGraspPoseRequestPtr;
typedef boost::shared_ptr< ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest const> StretchGraspPoseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator1> & lhs, const ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator2> & rhs)
{
  return lhs.segment_no == rhs.segment_no &&
    lhs.rank_no == rhs.rank_no;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator1> & lhs, const ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace stretch_fetch_grasp_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "49742a435b2434a96bb358b69a0bd1bf";
  }

  static const char* value(const ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x49742a435b2434a9ULL;
  static const uint64_t static_value2 = 0x6bb358b69a0bd1bfULL;
};

template<class ContainerAllocator>
struct DataType< ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "stretch_fetch_grasp_bridge/StretchGraspPoseRequest";
  }

  static const char* value(const ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 segment_no\n"
"int64 rank_no\n"
;
  }

  static const char* value(const ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.segment_no);
      stream.next(m.rank_no);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StretchGraspPoseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::stretch_fetch_grasp_bridge::StretchGraspPoseRequest_<ContainerAllocator>& v)
  {
    s << indent << "segment_no: ";
    Printer<int64_t>::stream(s, indent + "  ", v.segment_no);
    s << indent << "rank_no: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rank_no);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STRETCH_FETCH_GRASP_BRIDGE_MESSAGE_STRETCHGRASPPOSEREQUEST_H
