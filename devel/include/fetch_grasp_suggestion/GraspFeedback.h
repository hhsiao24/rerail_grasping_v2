// Generated by gencpp from file fetch_grasp_suggestion/GraspFeedback.msg
// DO NOT EDIT!


#ifndef FETCH_GRASP_SUGGESTION_MESSAGE_GRASPFEEDBACK_H
#define FETCH_GRASP_SUGGESTION_MESSAGE_GRASPFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fetch_grasp_suggestion
{
template <class ContainerAllocator>
struct GraspFeedback_
{
  typedef GraspFeedback_<ContainerAllocator> Type;

  GraspFeedback_()
    : indices_considered()
    , index_selected(0)  {
    }
  GraspFeedback_(const ContainerAllocator& _alloc)
    : indices_considered(_alloc)
    , index_selected(0)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _indices_considered_type;
  _indices_considered_type indices_considered;

   typedef int32_t _index_selected_type;
  _index_selected_type index_selected;





  typedef boost::shared_ptr< ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct GraspFeedback_

typedef ::fetch_grasp_suggestion::GraspFeedback_<std::allocator<void> > GraspFeedback;

typedef boost::shared_ptr< ::fetch_grasp_suggestion::GraspFeedback > GraspFeedbackPtr;
typedef boost::shared_ptr< ::fetch_grasp_suggestion::GraspFeedback const> GraspFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator1> & lhs, const ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.indices_considered == rhs.indices_considered &&
    lhs.index_selected == rhs.index_selected;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator1> & lhs, const ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fetch_grasp_suggestion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e864dcbf0eb315180e735726b63001e";
  }

  static const char* value(const ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e864dcbf0eb3151ULL;
  static const uint64_t static_value2 = 0x80e735726b63001eULL;
};

template<class ContainerAllocator>
struct DataType< ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fetch_grasp_suggestion/GraspFeedback";
  }

  static const char* value(const ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] indices_considered           # indices of grasps seen by the user\n"
"int32 index_selected                 # index of grasp selected for execution\n"
;
  }

  static const char* value(const ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.indices_considered);
      stream.next(m.index_selected);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraspFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fetch_grasp_suggestion::GraspFeedback_<ContainerAllocator>& v)
  {
    s << indent << "indices_considered[]" << std::endl;
    for (size_t i = 0; i < v.indices_considered.size(); ++i)
    {
      s << indent << "  indices_considered[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.indices_considered[i]);
    }
    s << indent << "index_selected: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index_selected);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FETCH_GRASP_SUGGESTION_MESSAGE_GRASPFEEDBACK_H
