// Generated by gencpp from file fetch_grasp_suggestion/SuggestGraspsResult.msg
// DO NOT EDIT!


#ifndef FETCH_GRASP_SUGGESTION_MESSAGE_SUGGESTGRASPSRESULT_H
#define FETCH_GRASP_SUGGESTION_MESSAGE_SUGGESTGRASPSRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fetch_grasp_suggestion/RankedGraspList.h>

namespace fetch_grasp_suggestion
{
template <class ContainerAllocator>
struct SuggestGraspsResult_
{
  typedef SuggestGraspsResult_<ContainerAllocator> Type;

  SuggestGraspsResult_()
    : grasp_list()  {
    }
  SuggestGraspsResult_(const ContainerAllocator& _alloc)
    : grasp_list(_alloc)  {
  (void)_alloc;
    }



   typedef  ::fetch_grasp_suggestion::RankedGraspList_<ContainerAllocator>  _grasp_list_type;
  _grasp_list_type grasp_list;





  typedef boost::shared_ptr< ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator> const> ConstPtr;

}; // struct SuggestGraspsResult_

typedef ::fetch_grasp_suggestion::SuggestGraspsResult_<std::allocator<void> > SuggestGraspsResult;

typedef boost::shared_ptr< ::fetch_grasp_suggestion::SuggestGraspsResult > SuggestGraspsResultPtr;
typedef boost::shared_ptr< ::fetch_grasp_suggestion::SuggestGraspsResult const> SuggestGraspsResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator1> & lhs, const ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator2> & rhs)
{
  return lhs.grasp_list == rhs.grasp_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator1> & lhs, const ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fetch_grasp_suggestion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dec19c31bd053bfcf3465abde75d0b98";
  }

  static const char* value(const ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdec19c31bd053bfcULL;
  static const uint64_t static_value2 = 0xf3465abde75d0b98ULL;
};

template<class ContainerAllocator>
struct DataType< ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fetch_grasp_suggestion/SuggestGraspsResult";
  }

  static const char* value(const ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"fetch_grasp_suggestion/RankedGraspList grasp_list  # ordered list of grasps with heuristics\n"
"\n"
"================================================================================\n"
"MSG: fetch_grasp_suggestion/RankedGraspList\n"
"fetch_grasp_suggestion/RankedGrasp[] grasps  # ranked list of grasps\n"
"int32 object_index                           # index of object to which grasps apply\n"
"================================================================================\n"
"MSG: fetch_grasp_suggestion/RankedGrasp\n"
"geometry_msgs/PoseStamped pose  # grasp pose\n"
"float64[] heuristics            # ranking heuristics\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.grasp_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SuggestGraspsResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fetch_grasp_suggestion::SuggestGraspsResult_<ContainerAllocator>& v)
  {
    s << indent << "grasp_list: ";
    s << std::endl;
    Printer< ::fetch_grasp_suggestion::RankedGraspList_<ContainerAllocator> >::stream(s, indent + "  ", v.grasp_list);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FETCH_GRASP_SUGGESTION_MESSAGE_SUGGESTGRASPSRESULT_H
