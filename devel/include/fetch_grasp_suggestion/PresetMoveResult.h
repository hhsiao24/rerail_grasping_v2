// Generated by gencpp from file fetch_grasp_suggestion/PresetMoveResult.msg
// DO NOT EDIT!


#ifndef FETCH_GRASP_SUGGESTION_MESSAGE_PRESETMOVERESULT_H
#define FETCH_GRASP_SUGGESTION_MESSAGE_PRESETMOVERESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fetch_grasp_suggestion
{
template <class ContainerAllocator>
struct PresetMoveResult_
{
  typedef PresetMoveResult_<ContainerAllocator> Type;

  PresetMoveResult_()
    : success(false)
    , error_code(0)  {
    }
  PresetMoveResult_(const ContainerAllocator& _alloc)
    : success(false)
    , error_code(0)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef int32_t _error_code_type;
  _error_code_type error_code;





  typedef boost::shared_ptr< ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator> const> ConstPtr;

}; // struct PresetMoveResult_

typedef ::fetch_grasp_suggestion::PresetMoveResult_<std::allocator<void> > PresetMoveResult;

typedef boost::shared_ptr< ::fetch_grasp_suggestion::PresetMoveResult > PresetMoveResultPtr;
typedef boost::shared_ptr< ::fetch_grasp_suggestion::PresetMoveResult const> PresetMoveResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator1> & lhs, const ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.error_code == rhs.error_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator1> & lhs, const ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fetch_grasp_suggestion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7810d8d565eb732f589fd1f6f2a192d9";
  }

  static const char* value(const ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7810d8d565eb732fULL;
  static const uint64_t static_value2 = 0x589fd1f6f2a192d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fetch_grasp_suggestion/PresetMoveResult";
  }

  static const char* value(const ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"bool success                          # True if the object is verified to be in the gripper after pickup\n"
"int32 error_code                       # MoveIt error code (as defined in moveit_msgs/MoveItErrorCodes.msg)\n"
;
  }

  static const char* value(const ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.error_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PresetMoveResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fetch_grasp_suggestion::PresetMoveResult_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "error_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FETCH_GRASP_SUGGESTION_MESSAGE_PRESETMOVERESULT_H
