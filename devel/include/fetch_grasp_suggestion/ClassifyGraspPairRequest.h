// Generated by gencpp from file fetch_grasp_suggestion/ClassifyGraspPairRequest.msg
// DO NOT EDIT!


#ifndef FETCH_GRASP_SUGGESTION_MESSAGE_CLASSIFYGRASPPAIRREQUEST_H
#define FETCH_GRASP_SUGGESTION_MESSAGE_CLASSIFYGRASPPAIRREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fetch_grasp_suggestion
{
template <class ContainerAllocator>
struct ClassifyGraspPairRequest_
{
  typedef ClassifyGraspPairRequest_<ContainerAllocator> Type;

  ClassifyGraspPairRequest_()
    : feature_vector()  {
    }
  ClassifyGraspPairRequest_(const ContainerAllocator& _alloc)
    : feature_vector(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _feature_vector_type;
  _feature_vector_type feature_vector;





  typedef boost::shared_ptr< ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ClassifyGraspPairRequest_

typedef ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<std::allocator<void> > ClassifyGraspPairRequest;

typedef boost::shared_ptr< ::fetch_grasp_suggestion::ClassifyGraspPairRequest > ClassifyGraspPairRequestPtr;
typedef boost::shared_ptr< ::fetch_grasp_suggestion::ClassifyGraspPairRequest const> ClassifyGraspPairRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator1> & lhs, const ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator2> & rhs)
{
  return lhs.feature_vector == rhs.feature_vector;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator1> & lhs, const ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fetch_grasp_suggestion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ffcbdb0b665cfd4f4e709bdcb88bbcb9";
  }

  static const char* value(const ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xffcbdb0b665cfd4fULL;
  static const uint64_t static_value2 = 0x4e709bdcb88bbcb9ULL;
};

template<class ContainerAllocator>
struct DataType< ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fetch_grasp_suggestion/ClassifyGraspPairRequest";
  }

  static const char* value(const ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] feature_vector   # Combined feature vector made from grasps i, j to be classified\n"
;
  }

  static const char* value(const ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.feature_vector);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClassifyGraspPairRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fetch_grasp_suggestion::ClassifyGraspPairRequest_<ContainerAllocator>& v)
  {
    s << indent << "feature_vector[]" << std::endl;
    for (size_t i = 0; i < v.feature_vector.size(); ++i)
    {
      s << indent << "  feature_vector[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.feature_vector[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FETCH_GRASP_SUGGESTION_MESSAGE_CLASSIFYGRASPPAIRREQUEST_H
