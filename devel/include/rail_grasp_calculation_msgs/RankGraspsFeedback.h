// Generated by gencpp from file rail_grasp_calculation_msgs/RankGraspsFeedback.msg
// DO NOT EDIT!


#ifndef RAIL_GRASP_CALCULATION_MSGS_MESSAGE_RANKGRASPSFEEDBACK_H
#define RAIL_GRASP_CALCULATION_MSGS_MESSAGE_RANKGRASPSFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rail_grasp_calculation_msgs
{
template <class ContainerAllocator>
struct RankGraspsFeedback_
{
  typedef RankGraspsFeedback_<ContainerAllocator> Type;

  RankGraspsFeedback_()
    : currentAction()  {
    }
  RankGraspsFeedback_(const ContainerAllocator& _alloc)
    : currentAction(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _currentAction_type;
  _currentAction_type currentAction;





  typedef boost::shared_ptr< ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct RankGraspsFeedback_

typedef ::rail_grasp_calculation_msgs::RankGraspsFeedback_<std::allocator<void> > RankGraspsFeedback;

typedef boost::shared_ptr< ::rail_grasp_calculation_msgs::RankGraspsFeedback > RankGraspsFeedbackPtr;
typedef boost::shared_ptr< ::rail_grasp_calculation_msgs::RankGraspsFeedback const> RankGraspsFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator1> & lhs, const ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.currentAction == rhs.currentAction;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator1> & lhs, const ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rail_grasp_calculation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "09caab27efd7cd31711aa05c6ca8a99d";
  }

  static const char* value(const ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x09caab27efd7cd31ULL;
  static const uint64_t static_value2 = 0x711aa05c6ca8a99dULL;
};

template<class ContainerAllocator>
struct DataType< ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rail_grasp_calculation_msgs/RankGraspsFeedback";
  }

  static const char* value(const ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define a feedback message\n"
"string currentAction                                    # text feedback indicating what's currently being executed\n"
"\n"
;
  }

  static const char* value(const ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.currentAction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RankGraspsFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rail_grasp_calculation_msgs::RankGraspsFeedback_<ContainerAllocator>& v)
  {
    s << indent << "currentAction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.currentAction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAIL_GRASP_CALCULATION_MSGS_MESSAGE_RANKGRASPSFEEDBACK_H
