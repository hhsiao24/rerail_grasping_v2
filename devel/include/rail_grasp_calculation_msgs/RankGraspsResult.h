// Generated by gencpp from file rail_grasp_calculation_msgs/RankGraspsResult.msg
// DO NOT EDIT!


#ifndef RAIL_GRASP_CALCULATION_MSGS_MESSAGE_RANKGRASPSRESULT_H
#define RAIL_GRASP_CALCULATION_MSGS_MESSAGE_RANKGRASPSRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseArray.h>
#include <rail_grasp_calculation_msgs/Heuristics.h>

namespace rail_grasp_calculation_msgs
{
template <class ContainerAllocator>
struct RankGraspsResult_
{
  typedef RankGraspsResult_<ContainerAllocator> Type;

  RankGraspsResult_()
    : graspList()
    , heuristicList()  {
    }
  RankGraspsResult_(const ContainerAllocator& _alloc)
    : graspList(_alloc)
    , heuristicList(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PoseArray_<ContainerAllocator>  _graspList_type;
  _graspList_type graspList;

   typedef std::vector< ::rail_grasp_calculation_msgs::Heuristics_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::rail_grasp_calculation_msgs::Heuristics_<ContainerAllocator> >> _heuristicList_type;
  _heuristicList_type heuristicList;





  typedef boost::shared_ptr< ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator> const> ConstPtr;

}; // struct RankGraspsResult_

typedef ::rail_grasp_calculation_msgs::RankGraspsResult_<std::allocator<void> > RankGraspsResult;

typedef boost::shared_ptr< ::rail_grasp_calculation_msgs::RankGraspsResult > RankGraspsResultPtr;
typedef boost::shared_ptr< ::rail_grasp_calculation_msgs::RankGraspsResult const> RankGraspsResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator1> & lhs, const ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator2> & rhs)
{
  return lhs.graspList == rhs.graspList &&
    lhs.heuristicList == rhs.heuristicList;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator1> & lhs, const ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rail_grasp_calculation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5f9187dd1b6a9c84dcd15ec9513e86e9";
  }

  static const char* value(const ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5f9187dd1b6a9c84ULL;
  static const uint64_t static_value2 = 0xdcd15ec9513e86e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rail_grasp_calculation_msgs/RankGraspsResult";
  }

  static const char* value(const ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the result\n"
"geometry_msgs/PoseArray graspList                       # ranked list of grasps\n"
"rail_grasp_calculation_msgs/Heuristics[] heuristicList  # ranking heuristics, corresponds with grasps\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseArray\n"
"# An array of poses with a header for global reference.\n"
"\n"
"Header header\n"
"\n"
"Pose[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: rail_grasp_calculation_msgs/Heuristics\n"
"float64[] heuristics\n"
;
  }

  static const char* value(const ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.graspList);
      stream.next(m.heuristicList);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RankGraspsResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rail_grasp_calculation_msgs::RankGraspsResult_<ContainerAllocator>& v)
  {
    s << indent << "graspList: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseArray_<ContainerAllocator> >::stream(s, indent + "  ", v.graspList);
    s << indent << "heuristicList[]" << std::endl;
    for (size_t i = 0; i < v.heuristicList.size(); ++i)
    {
      s << indent << "  heuristicList[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rail_grasp_calculation_msgs::Heuristics_<ContainerAllocator> >::stream(s, indent + "    ", v.heuristicList[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAIL_GRASP_CALCULATION_MSGS_MESSAGE_RANKGRASPSRESULT_H
