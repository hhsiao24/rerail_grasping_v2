// Generated by gencpp from file rail_grasp_calculation_msgs/RankGraspsGoal.msg
// DO NOT EDIT!


#ifndef RAIL_GRASP_CALCULATION_MSGS_MESSAGE_RANKGRASPSGOAL_H
#define RAIL_GRASP_CALCULATION_MSGS_MESSAGE_RANKGRASPSGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseArray.h>
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/PointCloud2.h>
#include <rail_grasp_calculation_msgs/Workspace.h>

namespace rail_grasp_calculation_msgs
{
template <class ContainerAllocator>
struct RankGraspsGoal_
{
  typedef RankGraspsGoal_<ContainerAllocator> Type;

  RankGraspsGoal_()
    : graspList()
    , sceneCloud()
    , segmentedCloud()
    , workspace()  {
    }
  RankGraspsGoal_(const ContainerAllocator& _alloc)
    : graspList(_alloc)
    , sceneCloud(_alloc)
    , segmentedCloud(_alloc)
    , workspace(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PoseArray_<ContainerAllocator>  _graspList_type;
  _graspList_type graspList;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _sceneCloud_type;
  _sceneCloud_type sceneCloud;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _segmentedCloud_type;
  _segmentedCloud_type segmentedCloud;

   typedef  ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator>  _workspace_type;
  _workspace_type workspace;





  typedef boost::shared_ptr< ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator> const> ConstPtr;

}; // struct RankGraspsGoal_

typedef ::rail_grasp_calculation_msgs::RankGraspsGoal_<std::allocator<void> > RankGraspsGoal;

typedef boost::shared_ptr< ::rail_grasp_calculation_msgs::RankGraspsGoal > RankGraspsGoalPtr;
typedef boost::shared_ptr< ::rail_grasp_calculation_msgs::RankGraspsGoal const> RankGraspsGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator1> & lhs, const ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator2> & rhs)
{
  return lhs.graspList == rhs.graspList &&
    lhs.sceneCloud == rhs.sceneCloud &&
    lhs.segmentedCloud == rhs.segmentedCloud &&
    lhs.workspace == rhs.workspace;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator1> & lhs, const ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rail_grasp_calculation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0e590bb1f43077b5b1f047d5b255cf91";
  }

  static const char* value(const ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0e590bb1f43077b5ULL;
  static const uint64_t static_value2 = 0xb1f047d5b255cf91ULL;
};

template<class ContainerAllocator>
struct DataType< ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rail_grasp_calculation_msgs/RankGraspsGoal";
  }

  static const char* value(const ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"\n"
"# Required: list of sampled grasps, to be clustered and ranked\n"
"geometry_msgs/PoseArray graspList\n"
"\n"
"# Required: complete point cloud of the environment\n"
"sensor_msgs/PointCloud2 sceneCloud\n"
"\n"
"# Optional: segmented point cloud of an object of interest; required for object-based grasp ranking\n"
"sensor_msgs/PointCloud2 segmentedCloud\n"
"\n"
"# Optional: workspace for grasp calculation; required for point-of-interest grasp ranking\n"
"rail_grasp_calculation_msgs/Workspace workspace         # Note: this is defined in the frame of the sceneCloud\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseArray\n"
"# An array of poses with a header for global reference.\n"
"\n"
"Header header\n"
"\n"
"Pose[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/PointCloud2\n"
"# This message holds a collection of N-dimensional points, which may\n"
"# contain additional information such as normals, intensity, etc. The\n"
"# point data is stored as a binary blob, its layout described by the\n"
"# contents of the \"fields\" array.\n"
"\n"
"# The point cloud data may be organized 2d (image-like) or 1d\n"
"# (unordered). Point clouds organized as 2d images may be produced by\n"
"# camera depth sensors such as stereo or time-of-flight.\n"
"\n"
"# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n"
"# points).\n"
"Header header\n"
"\n"
"# 2D structure of the point cloud. If the cloud is unordered, height is\n"
"# 1 and width is the length of the point cloud.\n"
"uint32 height\n"
"uint32 width\n"
"\n"
"# Describes the channels and their layout in the binary data blob.\n"
"PointField[] fields\n"
"\n"
"bool    is_bigendian # Is this data bigendian?\n"
"uint32  point_step   # Length of a point in bytes\n"
"uint32  row_step     # Length of a row in bytes\n"
"uint8[] data         # Actual point data, size is (row_step*height)\n"
"\n"
"bool is_dense        # True if there are no invalid points\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/PointField\n"
"# This message holds the description of one point entry in the\n"
"# PointCloud2 message format.\n"
"uint8 INT8    = 1\n"
"uint8 UINT8   = 2\n"
"uint8 INT16   = 3\n"
"uint8 UINT16  = 4\n"
"uint8 INT32   = 5\n"
"uint8 UINT32  = 6\n"
"uint8 FLOAT32 = 7\n"
"uint8 FLOAT64 = 8\n"
"\n"
"string name      # Name of field\n"
"uint32 offset    # Offset from start of point struct\n"
"uint8  datatype  # Datatype enumeration, see above\n"
"uint32 count     # How many elements in the field\n"
"\n"
"================================================================================\n"
"MSG: rail_grasp_calculation_msgs/Workspace\n"
"uint8 WORKSPACE_VOLUME = 0\n"
"uint8 CENTERED_ROI = 1\n"
"\n"
"uint8 mode                              # workspace definition mode, either WORKSPACE_VOLUME or CENTERED_ROI\n"
"float64 x_min                           # minimum x bound of rectangular workspace (for WORKSPACE_VOLUME only)\n"
"float64 x_max                           # maximum x bound of rectangular workspace (for WORKSPACE_VOLUME only)\n"
"float64 y_min                           # minimum y bound of rectangular workspace (for WORKSPACE_VOLUME only)\n"
"float64 y_max                           # maximum y bound of rectangular workspace (for WORKSPACE_VOLUME only)\n"
"float64 z_min                           # minimum z bound of rectangular workspace (for WORKSPACE_VOLUME only)\n"
"float64 z_max                           # maximum z bound of rectangular workspace (for WORKSPACE_VOLUME only)\n"
"geometry_msgs/Point roiCenter           # workspace center point (for CENTERED_ROI only)\n"
"geometry_msgs/Vector3 roiDimensions     # workspace bounds (for CENTERED_ROI only)\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.graspList);
      stream.next(m.sceneCloud);
      stream.next(m.segmentedCloud);
      stream.next(m.workspace);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RankGraspsGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rail_grasp_calculation_msgs::RankGraspsGoal_<ContainerAllocator>& v)
  {
    s << indent << "graspList: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseArray_<ContainerAllocator> >::stream(s, indent + "  ", v.graspList);
    s << indent << "sceneCloud: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.sceneCloud);
    s << indent << "segmentedCloud: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.segmentedCloud);
    s << indent << "workspace: ";
    s << std::endl;
    Printer< ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator> >::stream(s, indent + "  ", v.workspace);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAIL_GRASP_CALCULATION_MSGS_MESSAGE_RANKGRASPSGOAL_H
