// Generated by gencpp from file rail_grasp_calculation_msgs/Workspace.msg
// DO NOT EDIT!


#ifndef RAIL_GRASP_CALCULATION_MSGS_MESSAGE_WORKSPACE_H
#define RAIL_GRASP_CALCULATION_MSGS_MESSAGE_WORKSPACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>

namespace rail_grasp_calculation_msgs
{
template <class ContainerAllocator>
struct Workspace_
{
  typedef Workspace_<ContainerAllocator> Type;

  Workspace_()
    : mode(0)
    , x_min(0.0)
    , x_max(0.0)
    , y_min(0.0)
    , y_max(0.0)
    , z_min(0.0)
    , z_max(0.0)
    , roiCenter()
    , roiDimensions()  {
    }
  Workspace_(const ContainerAllocator& _alloc)
    : mode(0)
    , x_min(0.0)
    , x_max(0.0)
    , y_min(0.0)
    , y_max(0.0)
    , z_min(0.0)
    , z_max(0.0)
    , roiCenter(_alloc)
    , roiDimensions(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef double _x_min_type;
  _x_min_type x_min;

   typedef double _x_max_type;
  _x_max_type x_max;

   typedef double _y_min_type;
  _y_min_type y_min;

   typedef double _y_max_type;
  _y_max_type y_max;

   typedef double _z_min_type;
  _z_min_type z_min;

   typedef double _z_max_type;
  _z_max_type z_max;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _roiCenter_type;
  _roiCenter_type roiCenter;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _roiDimensions_type;
  _roiDimensions_type roiDimensions;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(WORKSPACE_VOLUME)
  #undef WORKSPACE_VOLUME
#endif
#if defined(_WIN32) && defined(CENTERED_ROI)
  #undef CENTERED_ROI
#endif

  enum {
    WORKSPACE_VOLUME = 0u,
    CENTERED_ROI = 1u,
  };


  typedef boost::shared_ptr< ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator> const> ConstPtr;

}; // struct Workspace_

typedef ::rail_grasp_calculation_msgs::Workspace_<std::allocator<void> > Workspace;

typedef boost::shared_ptr< ::rail_grasp_calculation_msgs::Workspace > WorkspacePtr;
typedef boost::shared_ptr< ::rail_grasp_calculation_msgs::Workspace const> WorkspaceConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator1> & lhs, const ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.x_min == rhs.x_min &&
    lhs.x_max == rhs.x_max &&
    lhs.y_min == rhs.y_min &&
    lhs.y_max == rhs.y_max &&
    lhs.z_min == rhs.z_min &&
    lhs.z_max == rhs.z_max &&
    lhs.roiCenter == rhs.roiCenter &&
    lhs.roiDimensions == rhs.roiDimensions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator1> & lhs, const ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rail_grasp_calculation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6d17931a043d8ef6982d0812ce82ff50";
  }

  static const char* value(const ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6d17931a043d8ef6ULL;
  static const uint64_t static_value2 = 0x982d0812ce82ff50ULL;
};

template<class ContainerAllocator>
struct DataType< ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rail_grasp_calculation_msgs/Workspace";
  }

  static const char* value(const ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 WORKSPACE_VOLUME = 0\n"
"uint8 CENTERED_ROI = 1\n"
"\n"
"uint8 mode                              # workspace definition mode, either WORKSPACE_VOLUME or CENTERED_ROI\n"
"float64 x_min                           # minimum x bound of rectangular workspace (for WORKSPACE_VOLUME only)\n"
"float64 x_max                           # maximum x bound of rectangular workspace (for WORKSPACE_VOLUME only)\n"
"float64 y_min                           # minimum y bound of rectangular workspace (for WORKSPACE_VOLUME only)\n"
"float64 y_max                           # maximum y bound of rectangular workspace (for WORKSPACE_VOLUME only)\n"
"float64 z_min                           # minimum z bound of rectangular workspace (for WORKSPACE_VOLUME only)\n"
"float64 z_max                           # maximum z bound of rectangular workspace (for WORKSPACE_VOLUME only)\n"
"geometry_msgs/Point roiCenter           # workspace center point (for CENTERED_ROI only)\n"
"geometry_msgs/Vector3 roiDimensions     # workspace bounds (for CENTERED_ROI only)\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.x_min);
      stream.next(m.x_max);
      stream.next(m.y_min);
      stream.next(m.y_max);
      stream.next(m.z_min);
      stream.next(m.z_max);
      stream.next(m.roiCenter);
      stream.next(m.roiDimensions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Workspace_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rail_grasp_calculation_msgs::Workspace_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "x_min: ";
    Printer<double>::stream(s, indent + "  ", v.x_min);
    s << indent << "x_max: ";
    Printer<double>::stream(s, indent + "  ", v.x_max);
    s << indent << "y_min: ";
    Printer<double>::stream(s, indent + "  ", v.y_min);
    s << indent << "y_max: ";
    Printer<double>::stream(s, indent + "  ", v.y_max);
    s << indent << "z_min: ";
    Printer<double>::stream(s, indent + "  ", v.z_min);
    s << indent << "z_max: ";
    Printer<double>::stream(s, indent + "  ", v.z_max);
    s << indent << "roiCenter: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.roiCenter);
    s << indent << "roiDimensions: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.roiDimensions);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAIL_GRASP_CALCULATION_MSGS_MESSAGE_WORKSPACE_H
