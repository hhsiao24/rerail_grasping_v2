# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rail_agile/Grasp.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class Grasp(genpy.Message):
  _md5sum = "e812ccd1fa0a0ad5be105b582346ad98"
  _type = "rail_agile/Grasp"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Vector3 center
geometry_msgs/Vector3 axis
geometry_msgs/Vector3 approach
geometry_msgs/Vector3 surface_center
std_msgs/Float32 width

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: std_msgs/Float32
float32 data"""
  __slots__ = ['center','axis','approach','surface_center','width']
  _slot_types = ['geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','std_msgs/Float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       center,axis,approach,surface_center,width

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Grasp, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.center is None:
        self.center = geometry_msgs.msg.Vector3()
      if self.axis is None:
        self.axis = geometry_msgs.msg.Vector3()
      if self.approach is None:
        self.approach = geometry_msgs.msg.Vector3()
      if self.surface_center is None:
        self.surface_center = geometry_msgs.msg.Vector3()
      if self.width is None:
        self.width = std_msgs.msg.Float32()
    else:
      self.center = geometry_msgs.msg.Vector3()
      self.axis = geometry_msgs.msg.Vector3()
      self.approach = geometry_msgs.msg.Vector3()
      self.surface_center = geometry_msgs.msg.Vector3()
      self.width = std_msgs.msg.Float32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12df().pack(_x.center.x, _x.center.y, _x.center.z, _x.axis.x, _x.axis.y, _x.axis.z, _x.approach.x, _x.approach.y, _x.approach.z, _x.surface_center.x, _x.surface_center.y, _x.surface_center.z, _x.width.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.center is None:
        self.center = geometry_msgs.msg.Vector3()
      if self.axis is None:
        self.axis = geometry_msgs.msg.Vector3()
      if self.approach is None:
        self.approach = geometry_msgs.msg.Vector3()
      if self.surface_center is None:
        self.surface_center = geometry_msgs.msg.Vector3()
      if self.width is None:
        self.width = std_msgs.msg.Float32()
      end = 0
      _x = self
      start = end
      end += 100
      (_x.center.x, _x.center.y, _x.center.z, _x.axis.x, _x.axis.y, _x.axis.z, _x.approach.x, _x.approach.y, _x.approach.z, _x.surface_center.x, _x.surface_center.y, _x.surface_center.z, _x.width.data,) = _get_struct_12df().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12df().pack(_x.center.x, _x.center.y, _x.center.z, _x.axis.x, _x.axis.y, _x.axis.z, _x.approach.x, _x.approach.y, _x.approach.z, _x.surface_center.x, _x.surface_center.y, _x.surface_center.z, _x.width.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.center is None:
        self.center = geometry_msgs.msg.Vector3()
      if self.axis is None:
        self.axis = geometry_msgs.msg.Vector3()
      if self.approach is None:
        self.approach = geometry_msgs.msg.Vector3()
      if self.surface_center is None:
        self.surface_center = geometry_msgs.msg.Vector3()
      if self.width is None:
        self.width = std_msgs.msg.Float32()
      end = 0
      _x = self
      start = end
      end += 100
      (_x.center.x, _x.center.y, _x.center.z, _x.axis.x, _x.axis.y, _x.axis.z, _x.approach.x, _x.approach.y, _x.approach.z, _x.surface_center.x, _x.surface_center.y, _x.surface_center.z, _x.width.data,) = _get_struct_12df().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12df = None
def _get_struct_12df():
    global _struct_12df
    if _struct_12df is None:
        _struct_12df = struct.Struct("<12df")
    return _struct_12df
