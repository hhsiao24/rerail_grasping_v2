# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rail_grasp_calculation_msgs/RankGraspsAction.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actionlib_msgs.msg
import genpy
import geometry_msgs.msg
import rail_grasp_calculation_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class RankGraspsAction(genpy.Message):
  _md5sum = "da48f8e2bcf8fe8d009ed6138c687348"
  _type = "rail_grasp_calculation_msgs/RankGraspsAction"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

RankGraspsActionGoal action_goal
RankGraspsActionResult action_result
RankGraspsActionFeedback action_feedback

================================================================================
MSG: rail_grasp_calculation_msgs/RankGraspsActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
RankGraspsGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: rail_grasp_calculation_msgs/RankGraspsGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal

# Required: list of sampled grasps, to be clustered and ranked
geometry_msgs/PoseArray graspList

# Required: complete point cloud of the environment
sensor_msgs/PointCloud2 sceneCloud

# Optional: segmented point cloud of an object of interest; required for object-based grasp ranking
sensor_msgs/PointCloud2 segmentedCloud

# Optional: workspace for grasp calculation; required for point-of-interest grasp ranking
rail_grasp_calculation_msgs/Workspace workspace         # Note: this is defined in the frame of the sceneCloud


================================================================================
MSG: geometry_msgs/PoseArray
# An array of poses with a header for global reference.

Header header

Pose[] poses

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: rail_grasp_calculation_msgs/Workspace
uint8 WORKSPACE_VOLUME = 0
uint8 CENTERED_ROI = 1

uint8 mode                              # workspace definition mode, either WORKSPACE_VOLUME or CENTERED_ROI
float64 x_min                           # minimum x bound of rectangular workspace (for WORKSPACE_VOLUME only)
float64 x_max                           # maximum x bound of rectangular workspace (for WORKSPACE_VOLUME only)
float64 y_min                           # minimum y bound of rectangular workspace (for WORKSPACE_VOLUME only)
float64 y_max                           # maximum y bound of rectangular workspace (for WORKSPACE_VOLUME only)
float64 z_min                           # minimum z bound of rectangular workspace (for WORKSPACE_VOLUME only)
float64 z_max                           # maximum z bound of rectangular workspace (for WORKSPACE_VOLUME only)
geometry_msgs/Point roiCenter           # workspace center point (for CENTERED_ROI only)
geometry_msgs/Vector3 roiDimensions     # workspace bounds (for CENTERED_ROI only)
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: rail_grasp_calculation_msgs/RankGraspsActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
RankGraspsResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: rail_grasp_calculation_msgs/RankGraspsResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the result
geometry_msgs/PoseArray graspList                       # ranked list of grasps
rail_grasp_calculation_msgs/Heuristics[] heuristicList  # ranking heuristics, corresponds with grasps

================================================================================
MSG: rail_grasp_calculation_msgs/Heuristics
float64[] heuristics

================================================================================
MSG: rail_grasp_calculation_msgs/RankGraspsActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
RankGraspsFeedback feedback

================================================================================
MSG: rail_grasp_calculation_msgs/RankGraspsFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define a feedback message
string currentAction                                    # text feedback indicating what's currently being executed

"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['rail_grasp_calculation_msgs/RankGraspsActionGoal','rail_grasp_calculation_msgs/RankGraspsActionResult','rail_grasp_calculation_msgs/RankGraspsActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RankGraspsAction, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = rail_grasp_calculation_msgs.msg.RankGraspsActionGoal()
      if self.action_result is None:
        self.action_result = rail_grasp_calculation_msgs.msg.RankGraspsActionResult()
      if self.action_feedback is None:
        self.action_feedback = rail_grasp_calculation_msgs.msg.RankGraspsActionFeedback()
    else:
      self.action_goal = rail_grasp_calculation_msgs.msg.RankGraspsActionGoal()
      self.action_result = rail_grasp_calculation_msgs.msg.RankGraspsActionResult()
      self.action_feedback = rail_grasp_calculation_msgs.msg.RankGraspsActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.graspList.header.seq, _x.action_goal.goal.graspList.header.stamp.secs, _x.action_goal.goal.graspList.header.stamp.nsecs))
      _x = self.action_goal.goal.graspList.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.graspList.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.graspList.poses:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.sceneCloud.header.seq, _x.action_goal.goal.sceneCloud.header.stamp.secs, _x.action_goal.goal.sceneCloud.header.stamp.nsecs))
      _x = self.action_goal.goal.sceneCloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal.sceneCloud.height, _x.action_goal.goal.sceneCloud.width))
      length = len(self.action_goal.goal.sceneCloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.sceneCloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.action_goal.goal.sceneCloud.is_bigendian, _x.action_goal.goal.sceneCloud.point_step, _x.action_goal.goal.sceneCloud.row_step))
      _x = self.action_goal.goal.sceneCloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.action_goal.goal.sceneCloud.is_dense, _x.action_goal.goal.segmentedCloud.header.seq, _x.action_goal.goal.segmentedCloud.header.stamp.secs, _x.action_goal.goal.segmentedCloud.header.stamp.nsecs))
      _x = self.action_goal.goal.segmentedCloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal.segmentedCloud.height, _x.action_goal.goal.segmentedCloud.width))
      length = len(self.action_goal.goal.segmentedCloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.segmentedCloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.action_goal.goal.segmentedCloud.is_bigendian, _x.action_goal.goal.segmentedCloud.point_step, _x.action_goal.goal.segmentedCloud.row_step))
      _x = self.action_goal.goal.segmentedCloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B12d3I().pack(_x.action_goal.goal.segmentedCloud.is_dense, _x.action_goal.goal.workspace.mode, _x.action_goal.goal.workspace.x_min, _x.action_goal.goal.workspace.x_max, _x.action_goal.goal.workspace.y_min, _x.action_goal.goal.workspace.y_max, _x.action_goal.goal.workspace.z_min, _x.action_goal.goal.workspace.z_max, _x.action_goal.goal.workspace.roiCenter.x, _x.action_goal.goal.workspace.roiCenter.y, _x.action_goal.goal.workspace.roiCenter.z, _x.action_goal.goal.workspace.roiDimensions.x, _x.action_goal.goal.workspace.roiDimensions.y, _x.action_goal.goal.workspace.roiDimensions.z, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.result.graspList.header.seq, _x.action_result.result.graspList.header.stamp.secs, _x.action_result.result.graspList.header.stamp.nsecs))
      _x = self.action_result.result.graspList.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_result.result.graspList.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.graspList.poses:
        _v3 = val1.position
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.orientation
        _x = _v4
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_result.result.heuristicList)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.heuristicList:
        length = len(val1.heuristics)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*val1.heuristics))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.currentAction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = rail_grasp_calculation_msgs.msg.RankGraspsActionGoal()
      if self.action_result is None:
        self.action_result = rail_grasp_calculation_msgs.msg.RankGraspsActionResult()
      if self.action_feedback is None:
        self.action_feedback = rail_grasp_calculation_msgs.msg.RankGraspsActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.graspList.header.seq, _x.action_goal.goal.graspList.header.stamp.secs, _x.action_goal.goal.graspList.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.graspList.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.graspList.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.graspList.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v5 = val1.position
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v6 = val1.orientation
        _x = _v6
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.graspList.poses.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.sceneCloud.header.seq, _x.action_goal.goal.sceneCloud.header.stamp.secs, _x.action_goal.goal.sceneCloud.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.sceneCloud.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.sceneCloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal.sceneCloud.height, _x.action_goal.goal.sceneCloud.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.sceneCloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.action_goal.goal.sceneCloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.action_goal.goal.sceneCloud.is_bigendian, _x.action_goal.goal.sceneCloud.point_step, _x.action_goal.goal.sceneCloud.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.action_goal.goal.sceneCloud.is_bigendian = bool(self.action_goal.goal.sceneCloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_goal.goal.sceneCloud.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.action_goal.goal.sceneCloud.is_dense, _x.action_goal.goal.segmentedCloud.header.seq, _x.action_goal.goal.segmentedCloud.header.stamp.secs, _x.action_goal.goal.segmentedCloud.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.action_goal.goal.sceneCloud.is_dense = bool(self.action_goal.goal.sceneCloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.segmentedCloud.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.segmentedCloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal.segmentedCloud.height, _x.action_goal.goal.segmentedCloud.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.segmentedCloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.action_goal.goal.segmentedCloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.action_goal.goal.segmentedCloud.is_bigendian, _x.action_goal.goal.segmentedCloud.point_step, _x.action_goal.goal.segmentedCloud.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.action_goal.goal.segmentedCloud.is_bigendian = bool(self.action_goal.goal.segmentedCloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_goal.goal.segmentedCloud.data = str[start:end]
      _x = self
      start = end
      end += 110
      (_x.action_goal.goal.segmentedCloud.is_dense, _x.action_goal.goal.workspace.mode, _x.action_goal.goal.workspace.x_min, _x.action_goal.goal.workspace.x_max, _x.action_goal.goal.workspace.y_min, _x.action_goal.goal.workspace.y_max, _x.action_goal.goal.workspace.z_min, _x.action_goal.goal.workspace.z_max, _x.action_goal.goal.workspace.roiCenter.x, _x.action_goal.goal.workspace.roiCenter.y, _x.action_goal.goal.workspace.roiCenter.z, _x.action_goal.goal.workspace.roiDimensions.x, _x.action_goal.goal.workspace.roiDimensions.y, _x.action_goal.goal.workspace.roiDimensions.z, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_2B12d3I().unpack(str[start:end])
      self.action_goal.goal.segmentedCloud.is_dense = bool(self.action_goal.goal.segmentedCloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_result.result.graspList.header.seq, _x.action_result.result.graspList.header.stamp.secs, _x.action_result.result.graspList.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.graspList.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.graspList.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.graspList.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v7 = val1.position
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.orientation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_result.result.graspList.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.heuristicList = []
      for i in range(0, length):
        val1 = rail_grasp_calculation_msgs.msg.Heuristics()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.heuristics = s.unpack(str[start:end])
        self.action_result.result.heuristicList.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.currentAction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.currentAction = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.graspList.header.seq, _x.action_goal.goal.graspList.header.stamp.secs, _x.action_goal.goal.graspList.header.stamp.nsecs))
      _x = self.action_goal.goal.graspList.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.graspList.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.graspList.poses:
        _v9 = val1.position
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = val1.orientation
        _x = _v10
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.sceneCloud.header.seq, _x.action_goal.goal.sceneCloud.header.stamp.secs, _x.action_goal.goal.sceneCloud.header.stamp.nsecs))
      _x = self.action_goal.goal.sceneCloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal.sceneCloud.height, _x.action_goal.goal.sceneCloud.width))
      length = len(self.action_goal.goal.sceneCloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.sceneCloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.action_goal.goal.sceneCloud.is_bigendian, _x.action_goal.goal.sceneCloud.point_step, _x.action_goal.goal.sceneCloud.row_step))
      _x = self.action_goal.goal.sceneCloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.action_goal.goal.sceneCloud.is_dense, _x.action_goal.goal.segmentedCloud.header.seq, _x.action_goal.goal.segmentedCloud.header.stamp.secs, _x.action_goal.goal.segmentedCloud.header.stamp.nsecs))
      _x = self.action_goal.goal.segmentedCloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal.segmentedCloud.height, _x.action_goal.goal.segmentedCloud.width))
      length = len(self.action_goal.goal.segmentedCloud.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.segmentedCloud.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.action_goal.goal.segmentedCloud.is_bigendian, _x.action_goal.goal.segmentedCloud.point_step, _x.action_goal.goal.segmentedCloud.row_step))
      _x = self.action_goal.goal.segmentedCloud.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B12d3I().pack(_x.action_goal.goal.segmentedCloud.is_dense, _x.action_goal.goal.workspace.mode, _x.action_goal.goal.workspace.x_min, _x.action_goal.goal.workspace.x_max, _x.action_goal.goal.workspace.y_min, _x.action_goal.goal.workspace.y_max, _x.action_goal.goal.workspace.z_min, _x.action_goal.goal.workspace.z_max, _x.action_goal.goal.workspace.roiCenter.x, _x.action_goal.goal.workspace.roiCenter.y, _x.action_goal.goal.workspace.roiCenter.z, _x.action_goal.goal.workspace.roiDimensions.x, _x.action_goal.goal.workspace.roiDimensions.y, _x.action_goal.goal.workspace.roiDimensions.z, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.result.graspList.header.seq, _x.action_result.result.graspList.header.stamp.secs, _x.action_result.result.graspList.header.stamp.nsecs))
      _x = self.action_result.result.graspList.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_result.result.graspList.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.graspList.poses:
        _v11 = val1.position
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = val1.orientation
        _x = _v12
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_result.result.heuristicList)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.heuristicList:
        length = len(val1.heuristics)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.heuristics.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.currentAction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = rail_grasp_calculation_msgs.msg.RankGraspsActionGoal()
      if self.action_result is None:
        self.action_result = rail_grasp_calculation_msgs.msg.RankGraspsActionResult()
      if self.action_feedback is None:
        self.action_feedback = rail_grasp_calculation_msgs.msg.RankGraspsActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.graspList.header.seq, _x.action_goal.goal.graspList.header.stamp.secs, _x.action_goal.goal.graspList.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.graspList.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.graspList.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.graspList.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v13 = val1.position
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v14 = val1.orientation
        _x = _v14
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.graspList.poses.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.sceneCloud.header.seq, _x.action_goal.goal.sceneCloud.header.stamp.secs, _x.action_goal.goal.sceneCloud.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.sceneCloud.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.sceneCloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal.sceneCloud.height, _x.action_goal.goal.sceneCloud.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.sceneCloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.action_goal.goal.sceneCloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.action_goal.goal.sceneCloud.is_bigendian, _x.action_goal.goal.sceneCloud.point_step, _x.action_goal.goal.sceneCloud.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.action_goal.goal.sceneCloud.is_bigendian = bool(self.action_goal.goal.sceneCloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_goal.goal.sceneCloud.data = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.action_goal.goal.sceneCloud.is_dense, _x.action_goal.goal.segmentedCloud.header.seq, _x.action_goal.goal.segmentedCloud.header.stamp.secs, _x.action_goal.goal.segmentedCloud.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.action_goal.goal.sceneCloud.is_dense = bool(self.action_goal.goal.sceneCloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.segmentedCloud.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.segmentedCloud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal.segmentedCloud.height, _x.action_goal.goal.segmentedCloud.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.segmentedCloud.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.action_goal.goal.segmentedCloud.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.action_goal.goal.segmentedCloud.is_bigendian, _x.action_goal.goal.segmentedCloud.point_step, _x.action_goal.goal.segmentedCloud.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.action_goal.goal.segmentedCloud.is_bigendian = bool(self.action_goal.goal.segmentedCloud.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_goal.goal.segmentedCloud.data = str[start:end]
      _x = self
      start = end
      end += 110
      (_x.action_goal.goal.segmentedCloud.is_dense, _x.action_goal.goal.workspace.mode, _x.action_goal.goal.workspace.x_min, _x.action_goal.goal.workspace.x_max, _x.action_goal.goal.workspace.y_min, _x.action_goal.goal.workspace.y_max, _x.action_goal.goal.workspace.z_min, _x.action_goal.goal.workspace.z_max, _x.action_goal.goal.workspace.roiCenter.x, _x.action_goal.goal.workspace.roiCenter.y, _x.action_goal.goal.workspace.roiCenter.z, _x.action_goal.goal.workspace.roiDimensions.x, _x.action_goal.goal.workspace.roiDimensions.y, _x.action_goal.goal.workspace.roiDimensions.z, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_2B12d3I().unpack(str[start:end])
      self.action_goal.goal.segmentedCloud.is_dense = bool(self.action_goal.goal.segmentedCloud.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_result.result.graspList.header.seq, _x.action_result.result.graspList.header.stamp.secs, _x.action_result.result.graspList.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.graspList.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.graspList.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.graspList.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v15 = val1.position
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v16 = val1.orientation
        _x = _v16
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_result.result.graspList.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.heuristicList = []
      for i in range(0, length):
        val1 = rail_grasp_calculation_msgs.msg.Heuristics()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.heuristics = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.action_result.result.heuristicList.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.currentAction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.currentAction = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B12d3I = None
def _get_struct_2B12d3I():
    global _struct_2B12d3I
    if _struct_2B12d3I is None:
        _struct_2B12d3I = struct.Struct("<2B12d3I")
    return _struct_2B12d3I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
_struct_IBI = None
def _get_struct_IBI():
    global _struct_IBI
    if _struct_IBI is None:
        _struct_IBI = struct.Struct("<IBI")
    return _struct_IBI
