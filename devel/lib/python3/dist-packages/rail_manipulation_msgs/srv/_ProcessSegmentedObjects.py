# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rail_manipulation_msgs/ProcessSegmentedObjectsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import rail_manipulation_msgs.msg
import sensor_msgs.msg
import std_msgs.msg
import visualization_msgs.msg

class ProcessSegmentedObjectsRequest(genpy.Message):
  _md5sum = "924369697b1d59bf060481bc93dca47a"
  _type = "rail_manipulation_msgs/ProcessSegmentedObjectsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """rail_manipulation_msgs/SegmentedObjectList segmented_objects

================================================================================
MSG: rail_manipulation_msgs/SegmentedObjectList
Header header              # Contains timestamp information for the most recent update to the object list
bool cleared               # A flag indicating this message is the result of a clear instead of a segment
SegmentedObject[] objects  # The list of segmented objects

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: rail_manipulation_msgs/SegmentedObject
sensor_msgs/PointCloud2 point_cloud                     # Segmented point cloud
sensor_msgs/Image image                                 # Segmented RGB image
geometry_msgs/Point centroid                            # Centroid of the point cloud
geometry_msgs/Point center                              # Center of the point cloud
rail_manipulation_msgs/BoundingVolume bounding_volume   # minimum bounding rectangular prism
float64 width                                           # The width of the object in meters (x in point cloud frame)
float64 depth                                           # The depth of the object in meters (y in point cloud frame)
float64 height                                          # The height of the object in meters (z in point cloud frame)
float32[] rgb                                           # Average color in RGB color space
float32[] cielab                                        # Average color in CIELAB color space
geometry_msgs/Quaternion orientation                    # Orientation of the object (typically from object rec)
bool recognized                                         # True if the object is recognized
string name                                             # Object name (if recognized)
uint32 model_id                                         # Object model ID (if recognized)
float64 confidence                                      # Recognition confidence value
Grasp[] grasps                                          # List of grasps (if recognized)
visualization_msgs/Marker marker                        # The downsampled visualization of the object
int32[] image_indices                                  # Indices of the segmented points in the 2D image coordinate

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: rail_manipulation_msgs/BoundingVolume
geometry_msgs/PoseStamped pose   # bounding volume pose (with respect to point cloud center)
geometry_msgs/Vector3 dimensions # x, y, z dimensions (with respect to coordinate frame and rotation defined in pose)
================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: rail_manipulation_msgs/Grasp
geometry_msgs/PoseStamped grasp_pose  # The grasp pose
string eef_frame_id                   # The coordinate frame of the end-effector used by this grasp
uint32 grasp_id
uint32 successes                      # The number of recorded times this grasp was successful (useful for success rate)
uint32 attempts                       # The number of recorded times this grasp was attempted (useful for success rate)

================================================================================
MSG: visualization_msgs/Marker
# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz

uint8 ARROW=0
uint8 CUBE=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 LINE_STRIP=4
uint8 LINE_LIST=5
uint8 CUBE_LIST=6
uint8 SPHERE_LIST=7
uint8 POINTS=8
uint8 TEXT_VIEW_FACING=9
uint8 MESH_RESOURCE=10
uint8 TRIANGLE_LIST=11

uint8 ADD=0
uint8 MODIFY=0
uint8 DELETE=2
uint8 DELETEALL=3

Header header                        # header for time/frame information
string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object
int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later
int32 type 		                       # Type of object
int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects
geometry_msgs/Pose pose                 # Pose of the object
geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)
std_msgs/ColorRGBA color             # Color [0.0-1.0]
duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever
bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep

#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
geometry_msgs/Point[] points
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
#number of colors must either be 0 or equal to the number of points
#NOTE: alpha is not yet used
std_msgs/ColorRGBA[] colors

# NOTE: only used for text markers
string text

# NOTE: only used for MESH_RESOURCE markers
string mesh_resource
bool mesh_use_embedded_materials

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a
"""
  __slots__ = ['segmented_objects']
  _slot_types = ['rail_manipulation_msgs/SegmentedObjectList']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       segmented_objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ProcessSegmentedObjectsRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.segmented_objects is None:
        self.segmented_objects = rail_manipulation_msgs.msg.SegmentedObjectList()
    else:
      self.segmented_objects = rail_manipulation_msgs.msg.SegmentedObjectList()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.segmented_objects.header.seq, _x.segmented_objects.header.stamp.secs, _x.segmented_objects.header.stamp.nsecs))
      _x = self.segmented_objects.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.segmented_objects.cleared
      buff.write(_get_struct_B().pack(_x))
      length = len(self.segmented_objects.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.segmented_objects.objects:
        _v1 = val1.point_cloud
        _v2 = _v1.header
        _x = _v2.seq
        buff.write(_get_struct_I().pack(_x))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        length = len(_v1.fields)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.fields:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
        _x = _v1
        buff.write(_get_struct_B2I().pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = _v1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.is_dense
        buff.write(_get_struct_B().pack(_x))
        _v4 = val1.image
        _v5 = _v4.header
        _x = _v5.seq
        buff.write(_get_struct_I().pack(_x))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v4
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = _v4.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v4
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = _v4.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v7 = val1.centroid
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v8 = val1.center
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v9 = val1.bounding_volume
        _v10 = _v9.pose
        _v11 = _v10.header
        _x = _v11.seq
        buff.write(_get_struct_I().pack(_x))
        _v12 = _v11.stamp
        _x = _v12
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v11.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v13 = _v10.pose
        _v14 = _v13.position
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = _v13.orientation
        _x = _v15
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v16 = _v9.dimensions
        _x = _v16
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.width, _x.depth, _x.height))
        length = len(val1.rgb)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.rgb))
        length = len(val1.cielab)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.cielab))
        _v17 = val1.orientation
        _x = _v17
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.recognized
        buff.write(_get_struct_B().pack(_x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_Id().pack(_x.model_id, _x.confidence))
        length = len(val1.grasps)
        buff.write(_struct_I.pack(length))
        for val2 in val1.grasps:
          _v18 = val2.grasp_pose
          _v19 = _v18.header
          _x = _v19.seq
          buff.write(_get_struct_I().pack(_x))
          _v20 = _v19.stamp
          _x = _v20
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v19.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v21 = _v18.pose
          _v22 = _v21.position
          _x = _v22
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v23 = _v21.orientation
          _x = _v23
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.eef_frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_3I().pack(_x.grasp_id, _x.successes, _x.attempts))
        _v24 = val1.marker
        _v25 = _v24.header
        _x = _v25.seq
        buff.write(_get_struct_I().pack(_x))
        _v26 = _v25.stamp
        _x = _v26
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v25.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v24.ns
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v24
        buff.write(_get_struct_3i().pack(_x.id, _x.type, _x.action))
        _v27 = _v24.pose
        _v28 = _v27.position
        _x = _v28
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v29 = _v27.orientation
        _x = _v29
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v30 = _v24.scale
        _x = _v30
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v31 = _v24.color
        _x = _v31
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _v32 = _v24.lifetime
        _x = _v32
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = _v24.frame_locked
        buff.write(_get_struct_B().pack(_x))
        length = len(_v24.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v24.points:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v24.colors)
        buff.write(_struct_I.pack(length))
        for val3 in _v24.colors:
          _x = val3
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _x = _v24.text
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v24.mesh_resource
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v24.mesh_use_embedded_materials
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.image_indices)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.Struct(pattern).pack(*val1.image_indices))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.segmented_objects is None:
        self.segmented_objects = rail_manipulation_msgs.msg.SegmentedObjectList()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.segmented_objects.header.seq, _x.segmented_objects.header.stamp.secs, _x.segmented_objects.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.segmented_objects.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.segmented_objects.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.segmented_objects.cleared,) = _get_struct_B().unpack(str[start:end])
      self.segmented_objects.cleared = bool(self.segmented_objects.cleared)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.segmented_objects.objects = []
      for i in range(0, length):
        val1 = rail_manipulation_msgs.msg.SegmentedObject()
        _v33 = val1.point_cloud
        _v34 = _v33.header
        start = end
        end += 4
        (_v34.seq,) = _get_struct_I().unpack(str[start:end])
        _v35 = _v34.stamp
        _x = _v35
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v34.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v34.frame_id = str[start:end]
        _x = _v33
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v33.fields = []
        for i in range(0, length):
          val3 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.name = str[start:end]
          _x = val3
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
          _v33.fields.append(val3)
        _x = _v33
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _get_struct_B2I().unpack(str[start:end])
        _v33.is_bigendian = bool(_v33.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v33.data = str[start:end]
        start = end
        end += 1
        (_v33.is_dense,) = _get_struct_B().unpack(str[start:end])
        _v33.is_dense = bool(_v33.is_dense)
        _v36 = val1.image
        _v37 = _v36.header
        start = end
        end += 4
        (_v37.seq,) = _get_struct_I().unpack(str[start:end])
        _v38 = _v37.stamp
        _x = _v38
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v37.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v37.frame_id = str[start:end]
        _x = _v36
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v36.encoding = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v36.encoding = str[start:end]
        _x = _v36
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v36.data = str[start:end]
        _v39 = val1.centroid
        _x = _v39
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v40 = val1.center
        _x = _v40
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v41 = val1.bounding_volume
        _v42 = _v41.pose
        _v43 = _v42.header
        start = end
        end += 4
        (_v43.seq,) = _get_struct_I().unpack(str[start:end])
        _v44 = _v43.stamp
        _x = _v44
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v43.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v43.frame_id = str[start:end]
        _v45 = _v42.pose
        _v46 = _v45.position
        _x = _v46
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v47 = _v45.orientation
        _x = _v47
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v48 = _v41.dimensions
        _x = _v48
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.width, _x.depth, _x.height,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.rgb = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.cielab = s.unpack(str[start:end])
        _v49 = val1.orientation
        _x = _v49
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 1
        (val1.recognized,) = _get_struct_B().unpack(str[start:end])
        val1.recognized = bool(val1.recognized)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.model_id, _x.confidence,) = _get_struct_Id().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.grasps = []
        for i in range(0, length):
          val2 = rail_manipulation_msgs.msg.Grasp()
          _v50 = val2.grasp_pose
          _v51 = _v50.header
          start = end
          end += 4
          (_v51.seq,) = _get_struct_I().unpack(str[start:end])
          _v52 = _v51.stamp
          _x = _v52
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v51.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v51.frame_id = str[start:end]
          _v53 = _v50.pose
          _v54 = _v53.position
          _x = _v54
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v55 = _v53.orientation
          _x = _v55
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.eef_frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.eef_frame_id = str[start:end]
          _x = val2
          start = end
          end += 12
          (_x.grasp_id, _x.successes, _x.attempts,) = _get_struct_3I().unpack(str[start:end])
          val1.grasps.append(val2)
        _v56 = val1.marker
        _v57 = _v56.header
        start = end
        end += 4
        (_v57.seq,) = _get_struct_I().unpack(str[start:end])
        _v58 = _v57.stamp
        _x = _v58
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v57.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v57.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v56.ns = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v56.ns = str[start:end]
        _x = _v56
        start = end
        end += 12
        (_x.id, _x.type, _x.action,) = _get_struct_3i().unpack(str[start:end])
        _v59 = _v56.pose
        _v60 = _v59.position
        _x = _v60
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v61 = _v59.orientation
        _x = _v61
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v62 = _v56.scale
        _x = _v62
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v63 = _v56.color
        _x = _v63
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        _v64 = _v56.lifetime
        _x = _v64
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 1
        (_v56.frame_locked,) = _get_struct_B().unpack(str[start:end])
        _v56.frame_locked = bool(_v56.frame_locked)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v56.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v56.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v56.colors = []
        for i in range(0, length):
          val3 = std_msgs.msg.ColorRGBA()
          _x = val3
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v56.colors.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v56.text = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v56.text = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v56.mesh_resource = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v56.mesh_resource = str[start:end]
        start = end
        end += 1
        (_v56.mesh_use_embedded_materials,) = _get_struct_B().unpack(str[start:end])
        _v56.mesh_use_embedded_materials = bool(_v56.mesh_use_embedded_materials)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.image_indices = s.unpack(str[start:end])
        self.segmented_objects.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.segmented_objects.header.seq, _x.segmented_objects.header.stamp.secs, _x.segmented_objects.header.stamp.nsecs))
      _x = self.segmented_objects.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.segmented_objects.cleared
      buff.write(_get_struct_B().pack(_x))
      length = len(self.segmented_objects.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.segmented_objects.objects:
        _v65 = val1.point_cloud
        _v66 = _v65.header
        _x = _v66.seq
        buff.write(_get_struct_I().pack(_x))
        _v67 = _v66.stamp
        _x = _v67
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v66.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v65
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        length = len(_v65.fields)
        buff.write(_struct_I.pack(length))
        for val3 in _v65.fields:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
        _x = _v65
        buff.write(_get_struct_B2I().pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = _v65.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v65.is_dense
        buff.write(_get_struct_B().pack(_x))
        _v68 = val1.image
        _v69 = _v68.header
        _x = _v69.seq
        buff.write(_get_struct_I().pack(_x))
        _v70 = _v69.stamp
        _x = _v70
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v69.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v68
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = _v68.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v68
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = _v68.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v71 = val1.centroid
        _x = _v71
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v72 = val1.center
        _x = _v72
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v73 = val1.bounding_volume
        _v74 = _v73.pose
        _v75 = _v74.header
        _x = _v75.seq
        buff.write(_get_struct_I().pack(_x))
        _v76 = _v75.stamp
        _x = _v76
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v75.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v77 = _v74.pose
        _v78 = _v77.position
        _x = _v78
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v79 = _v77.orientation
        _x = _v79
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v80 = _v73.dimensions
        _x = _v80
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.width, _x.depth, _x.height))
        length = len(val1.rgb)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.rgb.tostring())
        length = len(val1.cielab)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.cielab.tostring())
        _v81 = val1.orientation
        _x = _v81
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.recognized
        buff.write(_get_struct_B().pack(_x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_Id().pack(_x.model_id, _x.confidence))
        length = len(val1.grasps)
        buff.write(_struct_I.pack(length))
        for val2 in val1.grasps:
          _v82 = val2.grasp_pose
          _v83 = _v82.header
          _x = _v83.seq
          buff.write(_get_struct_I().pack(_x))
          _v84 = _v83.stamp
          _x = _v84
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v83.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v85 = _v82.pose
          _v86 = _v85.position
          _x = _v86
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v87 = _v85.orientation
          _x = _v87
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.eef_frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_3I().pack(_x.grasp_id, _x.successes, _x.attempts))
        _v88 = val1.marker
        _v89 = _v88.header
        _x = _v89.seq
        buff.write(_get_struct_I().pack(_x))
        _v90 = _v89.stamp
        _x = _v90
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v89.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v88.ns
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v88
        buff.write(_get_struct_3i().pack(_x.id, _x.type, _x.action))
        _v91 = _v88.pose
        _v92 = _v91.position
        _x = _v92
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v93 = _v91.orientation
        _x = _v93
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v94 = _v88.scale
        _x = _v94
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v95 = _v88.color
        _x = _v95
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _v96 = _v88.lifetime
        _x = _v96
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = _v88.frame_locked
        buff.write(_get_struct_B().pack(_x))
        length = len(_v88.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v88.points:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v88.colors)
        buff.write(_struct_I.pack(length))
        for val3 in _v88.colors:
          _x = val3
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _x = _v88.text
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v88.mesh_resource
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v88.mesh_use_embedded_materials
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.image_indices)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.image_indices.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.segmented_objects is None:
        self.segmented_objects = rail_manipulation_msgs.msg.SegmentedObjectList()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.segmented_objects.header.seq, _x.segmented_objects.header.stamp.secs, _x.segmented_objects.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.segmented_objects.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.segmented_objects.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.segmented_objects.cleared,) = _get_struct_B().unpack(str[start:end])
      self.segmented_objects.cleared = bool(self.segmented_objects.cleared)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.segmented_objects.objects = []
      for i in range(0, length):
        val1 = rail_manipulation_msgs.msg.SegmentedObject()
        _v97 = val1.point_cloud
        _v98 = _v97.header
        start = end
        end += 4
        (_v98.seq,) = _get_struct_I().unpack(str[start:end])
        _v99 = _v98.stamp
        _x = _v99
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v98.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v98.frame_id = str[start:end]
        _x = _v97
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v97.fields = []
        for i in range(0, length):
          val3 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.name = str[start:end]
          _x = val3
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
          _v97.fields.append(val3)
        _x = _v97
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _get_struct_B2I().unpack(str[start:end])
        _v97.is_bigendian = bool(_v97.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v97.data = str[start:end]
        start = end
        end += 1
        (_v97.is_dense,) = _get_struct_B().unpack(str[start:end])
        _v97.is_dense = bool(_v97.is_dense)
        _v100 = val1.image
        _v101 = _v100.header
        start = end
        end += 4
        (_v101.seq,) = _get_struct_I().unpack(str[start:end])
        _v102 = _v101.stamp
        _x = _v102
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v101.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v101.frame_id = str[start:end]
        _x = _v100
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v100.encoding = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v100.encoding = str[start:end]
        _x = _v100
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v100.data = str[start:end]
        _v103 = val1.centroid
        _x = _v103
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v104 = val1.center
        _x = _v104
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v105 = val1.bounding_volume
        _v106 = _v105.pose
        _v107 = _v106.header
        start = end
        end += 4
        (_v107.seq,) = _get_struct_I().unpack(str[start:end])
        _v108 = _v107.stamp
        _x = _v108
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v107.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v107.frame_id = str[start:end]
        _v109 = _v106.pose
        _v110 = _v109.position
        _x = _v110
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v111 = _v109.orientation
        _x = _v111
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v112 = _v105.dimensions
        _x = _v112
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.width, _x.depth, _x.height,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.rgb = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.cielab = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v113 = val1.orientation
        _x = _v113
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 1
        (val1.recognized,) = _get_struct_B().unpack(str[start:end])
        val1.recognized = bool(val1.recognized)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.model_id, _x.confidence,) = _get_struct_Id().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.grasps = []
        for i in range(0, length):
          val2 = rail_manipulation_msgs.msg.Grasp()
          _v114 = val2.grasp_pose
          _v115 = _v114.header
          start = end
          end += 4
          (_v115.seq,) = _get_struct_I().unpack(str[start:end])
          _v116 = _v115.stamp
          _x = _v116
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v115.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v115.frame_id = str[start:end]
          _v117 = _v114.pose
          _v118 = _v117.position
          _x = _v118
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v119 = _v117.orientation
          _x = _v119
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.eef_frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.eef_frame_id = str[start:end]
          _x = val2
          start = end
          end += 12
          (_x.grasp_id, _x.successes, _x.attempts,) = _get_struct_3I().unpack(str[start:end])
          val1.grasps.append(val2)
        _v120 = val1.marker
        _v121 = _v120.header
        start = end
        end += 4
        (_v121.seq,) = _get_struct_I().unpack(str[start:end])
        _v122 = _v121.stamp
        _x = _v122
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v121.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v121.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v120.ns = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v120.ns = str[start:end]
        _x = _v120
        start = end
        end += 12
        (_x.id, _x.type, _x.action,) = _get_struct_3i().unpack(str[start:end])
        _v123 = _v120.pose
        _v124 = _v123.position
        _x = _v124
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v125 = _v123.orientation
        _x = _v125
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v126 = _v120.scale
        _x = _v126
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v127 = _v120.color
        _x = _v127
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        _v128 = _v120.lifetime
        _x = _v128
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 1
        (_v120.frame_locked,) = _get_struct_B().unpack(str[start:end])
        _v120.frame_locked = bool(_v120.frame_locked)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v120.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v120.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v120.colors = []
        for i in range(0, length):
          val3 = std_msgs.msg.ColorRGBA()
          _x = val3
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v120.colors.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v120.text = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v120.text = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v120.mesh_resource = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v120.mesh_resource = str[start:end]
        start = end
        end += 1
        (_v120.mesh_use_embedded_materials,) = _get_struct_B().unpack(str[start:end])
        _v120.mesh_use_embedded_materials = bool(_v120.mesh_use_embedded_materials)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.image_indices = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        self.segmented_objects.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_IBI = None
def _get_struct_IBI():
    global _struct_IBI
    if _struct_IBI is None:
        _struct_IBI = struct.Struct("<IBI")
    return _struct_IBI
_struct_Id = None
def _get_struct_Id():
    global _struct_Id
    if _struct_Id is None:
        _struct_Id = struct.Struct("<Id")
    return _struct_Id
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rail_manipulation_msgs/ProcessSegmentedObjectsResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import rail_manipulation_msgs.msg
import sensor_msgs.msg
import std_msgs.msg
import visualization_msgs.msg

class ProcessSegmentedObjectsResponse(genpy.Message):
  _md5sum = "924369697b1d59bf060481bc93dca47a"
  _type = "rail_manipulation_msgs/ProcessSegmentedObjectsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """rail_manipulation_msgs/SegmentedObjectList segmented_objects

================================================================================
MSG: rail_manipulation_msgs/SegmentedObjectList
Header header              # Contains timestamp information for the most recent update to the object list
bool cleared               # A flag indicating this message is the result of a clear instead of a segment
SegmentedObject[] objects  # The list of segmented objects

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: rail_manipulation_msgs/SegmentedObject
sensor_msgs/PointCloud2 point_cloud                     # Segmented point cloud
sensor_msgs/Image image                                 # Segmented RGB image
geometry_msgs/Point centroid                            # Centroid of the point cloud
geometry_msgs/Point center                              # Center of the point cloud
rail_manipulation_msgs/BoundingVolume bounding_volume   # minimum bounding rectangular prism
float64 width                                           # The width of the object in meters (x in point cloud frame)
float64 depth                                           # The depth of the object in meters (y in point cloud frame)
float64 height                                          # The height of the object in meters (z in point cloud frame)
float32[] rgb                                           # Average color in RGB color space
float32[] cielab                                        # Average color in CIELAB color space
geometry_msgs/Quaternion orientation                    # Orientation of the object (typically from object rec)
bool recognized                                         # True if the object is recognized
string name                                             # Object name (if recognized)
uint32 model_id                                         # Object model ID (if recognized)
float64 confidence                                      # Recognition confidence value
Grasp[] grasps                                          # List of grasps (if recognized)
visualization_msgs/Marker marker                        # The downsampled visualization of the object
int32[] image_indices                                  # Indices of the segmented points in the 2D image coordinate

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: rail_manipulation_msgs/BoundingVolume
geometry_msgs/PoseStamped pose   # bounding volume pose (with respect to point cloud center)
geometry_msgs/Vector3 dimensions # x, y, z dimensions (with respect to coordinate frame and rotation defined in pose)
================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: rail_manipulation_msgs/Grasp
geometry_msgs/PoseStamped grasp_pose  # The grasp pose
string eef_frame_id                   # The coordinate frame of the end-effector used by this grasp
uint32 grasp_id
uint32 successes                      # The number of recorded times this grasp was successful (useful for success rate)
uint32 attempts                       # The number of recorded times this grasp was attempted (useful for success rate)

================================================================================
MSG: visualization_msgs/Marker
# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz

uint8 ARROW=0
uint8 CUBE=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 LINE_STRIP=4
uint8 LINE_LIST=5
uint8 CUBE_LIST=6
uint8 SPHERE_LIST=7
uint8 POINTS=8
uint8 TEXT_VIEW_FACING=9
uint8 MESH_RESOURCE=10
uint8 TRIANGLE_LIST=11

uint8 ADD=0
uint8 MODIFY=0
uint8 DELETE=2
uint8 DELETEALL=3

Header header                        # header for time/frame information
string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object
int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later
int32 type 		                       # Type of object
int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object, 3 deletes all objects
geometry_msgs/Pose pose                 # Pose of the object
geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)
std_msgs/ColorRGBA color             # Color [0.0-1.0]
duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever
bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep

#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
geometry_msgs/Point[] points
#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)
#number of colors must either be 0 or equal to the number of points
#NOTE: alpha is not yet used
std_msgs/ColorRGBA[] colors

# NOTE: only used for text markers
string text

# NOTE: only used for MESH_RESOURCE markers
string mesh_resource
bool mesh_use_embedded_materials

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a
"""
  __slots__ = ['segmented_objects']
  _slot_types = ['rail_manipulation_msgs/SegmentedObjectList']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       segmented_objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ProcessSegmentedObjectsResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.segmented_objects is None:
        self.segmented_objects = rail_manipulation_msgs.msg.SegmentedObjectList()
    else:
      self.segmented_objects = rail_manipulation_msgs.msg.SegmentedObjectList()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.segmented_objects.header.seq, _x.segmented_objects.header.stamp.secs, _x.segmented_objects.header.stamp.nsecs))
      _x = self.segmented_objects.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.segmented_objects.cleared
      buff.write(_get_struct_B().pack(_x))
      length = len(self.segmented_objects.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.segmented_objects.objects:
        _v129 = val1.point_cloud
        _v130 = _v129.header
        _x = _v130.seq
        buff.write(_get_struct_I().pack(_x))
        _v131 = _v130.stamp
        _x = _v131
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v130.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v129
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        length = len(_v129.fields)
        buff.write(_struct_I.pack(length))
        for val3 in _v129.fields:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
        _x = _v129
        buff.write(_get_struct_B2I().pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = _v129.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v129.is_dense
        buff.write(_get_struct_B().pack(_x))
        _v132 = val1.image
        _v133 = _v132.header
        _x = _v133.seq
        buff.write(_get_struct_I().pack(_x))
        _v134 = _v133.stamp
        _x = _v134
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v133.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v132
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = _v132.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v132
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = _v132.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v135 = val1.centroid
        _x = _v135
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v136 = val1.center
        _x = _v136
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v137 = val1.bounding_volume
        _v138 = _v137.pose
        _v139 = _v138.header
        _x = _v139.seq
        buff.write(_get_struct_I().pack(_x))
        _v140 = _v139.stamp
        _x = _v140
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v139.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v141 = _v138.pose
        _v142 = _v141.position
        _x = _v142
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v143 = _v141.orientation
        _x = _v143
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v144 = _v137.dimensions
        _x = _v144
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.width, _x.depth, _x.height))
        length = len(val1.rgb)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.rgb))
        length = len(val1.cielab)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.cielab))
        _v145 = val1.orientation
        _x = _v145
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.recognized
        buff.write(_get_struct_B().pack(_x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_Id().pack(_x.model_id, _x.confidence))
        length = len(val1.grasps)
        buff.write(_struct_I.pack(length))
        for val2 in val1.grasps:
          _v146 = val2.grasp_pose
          _v147 = _v146.header
          _x = _v147.seq
          buff.write(_get_struct_I().pack(_x))
          _v148 = _v147.stamp
          _x = _v148
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v147.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v149 = _v146.pose
          _v150 = _v149.position
          _x = _v150
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v151 = _v149.orientation
          _x = _v151
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.eef_frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_3I().pack(_x.grasp_id, _x.successes, _x.attempts))
        _v152 = val1.marker
        _v153 = _v152.header
        _x = _v153.seq
        buff.write(_get_struct_I().pack(_x))
        _v154 = _v153.stamp
        _x = _v154
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v153.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v152.ns
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v152
        buff.write(_get_struct_3i().pack(_x.id, _x.type, _x.action))
        _v155 = _v152.pose
        _v156 = _v155.position
        _x = _v156
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v157 = _v155.orientation
        _x = _v157
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v158 = _v152.scale
        _x = _v158
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v159 = _v152.color
        _x = _v159
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _v160 = _v152.lifetime
        _x = _v160
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = _v152.frame_locked
        buff.write(_get_struct_B().pack(_x))
        length = len(_v152.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v152.points:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v152.colors)
        buff.write(_struct_I.pack(length))
        for val3 in _v152.colors:
          _x = val3
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _x = _v152.text
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v152.mesh_resource
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v152.mesh_use_embedded_materials
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.image_indices)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.Struct(pattern).pack(*val1.image_indices))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.segmented_objects is None:
        self.segmented_objects = rail_manipulation_msgs.msg.SegmentedObjectList()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.segmented_objects.header.seq, _x.segmented_objects.header.stamp.secs, _x.segmented_objects.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.segmented_objects.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.segmented_objects.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.segmented_objects.cleared,) = _get_struct_B().unpack(str[start:end])
      self.segmented_objects.cleared = bool(self.segmented_objects.cleared)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.segmented_objects.objects = []
      for i in range(0, length):
        val1 = rail_manipulation_msgs.msg.SegmentedObject()
        _v161 = val1.point_cloud
        _v162 = _v161.header
        start = end
        end += 4
        (_v162.seq,) = _get_struct_I().unpack(str[start:end])
        _v163 = _v162.stamp
        _x = _v163
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v162.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v162.frame_id = str[start:end]
        _x = _v161
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v161.fields = []
        for i in range(0, length):
          val3 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.name = str[start:end]
          _x = val3
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
          _v161.fields.append(val3)
        _x = _v161
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _get_struct_B2I().unpack(str[start:end])
        _v161.is_bigendian = bool(_v161.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v161.data = str[start:end]
        start = end
        end += 1
        (_v161.is_dense,) = _get_struct_B().unpack(str[start:end])
        _v161.is_dense = bool(_v161.is_dense)
        _v164 = val1.image
        _v165 = _v164.header
        start = end
        end += 4
        (_v165.seq,) = _get_struct_I().unpack(str[start:end])
        _v166 = _v165.stamp
        _x = _v166
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v165.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v165.frame_id = str[start:end]
        _x = _v164
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v164.encoding = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v164.encoding = str[start:end]
        _x = _v164
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v164.data = str[start:end]
        _v167 = val1.centroid
        _x = _v167
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v168 = val1.center
        _x = _v168
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v169 = val1.bounding_volume
        _v170 = _v169.pose
        _v171 = _v170.header
        start = end
        end += 4
        (_v171.seq,) = _get_struct_I().unpack(str[start:end])
        _v172 = _v171.stamp
        _x = _v172
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v171.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v171.frame_id = str[start:end]
        _v173 = _v170.pose
        _v174 = _v173.position
        _x = _v174
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v175 = _v173.orientation
        _x = _v175
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v176 = _v169.dimensions
        _x = _v176
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.width, _x.depth, _x.height,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.rgb = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.cielab = s.unpack(str[start:end])
        _v177 = val1.orientation
        _x = _v177
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 1
        (val1.recognized,) = _get_struct_B().unpack(str[start:end])
        val1.recognized = bool(val1.recognized)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.model_id, _x.confidence,) = _get_struct_Id().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.grasps = []
        for i in range(0, length):
          val2 = rail_manipulation_msgs.msg.Grasp()
          _v178 = val2.grasp_pose
          _v179 = _v178.header
          start = end
          end += 4
          (_v179.seq,) = _get_struct_I().unpack(str[start:end])
          _v180 = _v179.stamp
          _x = _v180
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v179.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v179.frame_id = str[start:end]
          _v181 = _v178.pose
          _v182 = _v181.position
          _x = _v182
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v183 = _v181.orientation
          _x = _v183
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.eef_frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.eef_frame_id = str[start:end]
          _x = val2
          start = end
          end += 12
          (_x.grasp_id, _x.successes, _x.attempts,) = _get_struct_3I().unpack(str[start:end])
          val1.grasps.append(val2)
        _v184 = val1.marker
        _v185 = _v184.header
        start = end
        end += 4
        (_v185.seq,) = _get_struct_I().unpack(str[start:end])
        _v186 = _v185.stamp
        _x = _v186
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v185.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v185.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v184.ns = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v184.ns = str[start:end]
        _x = _v184
        start = end
        end += 12
        (_x.id, _x.type, _x.action,) = _get_struct_3i().unpack(str[start:end])
        _v187 = _v184.pose
        _v188 = _v187.position
        _x = _v188
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v189 = _v187.orientation
        _x = _v189
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v190 = _v184.scale
        _x = _v190
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v191 = _v184.color
        _x = _v191
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        _v192 = _v184.lifetime
        _x = _v192
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 1
        (_v184.frame_locked,) = _get_struct_B().unpack(str[start:end])
        _v184.frame_locked = bool(_v184.frame_locked)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v184.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v184.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v184.colors = []
        for i in range(0, length):
          val3 = std_msgs.msg.ColorRGBA()
          _x = val3
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v184.colors.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v184.text = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v184.text = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v184.mesh_resource = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v184.mesh_resource = str[start:end]
        start = end
        end += 1
        (_v184.mesh_use_embedded_materials,) = _get_struct_B().unpack(str[start:end])
        _v184.mesh_use_embedded_materials = bool(_v184.mesh_use_embedded_materials)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.image_indices = s.unpack(str[start:end])
        self.segmented_objects.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.segmented_objects.header.seq, _x.segmented_objects.header.stamp.secs, _x.segmented_objects.header.stamp.nsecs))
      _x = self.segmented_objects.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.segmented_objects.cleared
      buff.write(_get_struct_B().pack(_x))
      length = len(self.segmented_objects.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.segmented_objects.objects:
        _v193 = val1.point_cloud
        _v194 = _v193.header
        _x = _v194.seq
        buff.write(_get_struct_I().pack(_x))
        _v195 = _v194.stamp
        _x = _v195
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v194.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v193
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        length = len(_v193.fields)
        buff.write(_struct_I.pack(length))
        for val3 in _v193.fields:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val3
          buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
        _x = _v193
        buff.write(_get_struct_B2I().pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = _v193.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v193.is_dense
        buff.write(_get_struct_B().pack(_x))
        _v196 = val1.image
        _v197 = _v196.header
        _x = _v197.seq
        buff.write(_get_struct_I().pack(_x))
        _v198 = _v197.stamp
        _x = _v198
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v197.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v196
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = _v196.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v196
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = _v196.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v199 = val1.centroid
        _x = _v199
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v200 = val1.center
        _x = _v200
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v201 = val1.bounding_volume
        _v202 = _v201.pose
        _v203 = _v202.header
        _x = _v203.seq
        buff.write(_get_struct_I().pack(_x))
        _v204 = _v203.stamp
        _x = _v204
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v203.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v205 = _v202.pose
        _v206 = _v205.position
        _x = _v206
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v207 = _v205.orientation
        _x = _v207
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v208 = _v201.dimensions
        _x = _v208
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.width, _x.depth, _x.height))
        length = len(val1.rgb)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.rgb.tostring())
        length = len(val1.cielab)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.cielab.tostring())
        _v209 = val1.orientation
        _x = _v209
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.recognized
        buff.write(_get_struct_B().pack(_x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_Id().pack(_x.model_id, _x.confidence))
        length = len(val1.grasps)
        buff.write(_struct_I.pack(length))
        for val2 in val1.grasps:
          _v210 = val2.grasp_pose
          _v211 = _v210.header
          _x = _v211.seq
          buff.write(_get_struct_I().pack(_x))
          _v212 = _v211.stamp
          _x = _v212
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v211.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v213 = _v210.pose
          _v214 = _v213.position
          _x = _v214
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v215 = _v213.orientation
          _x = _v215
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.eef_frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_3I().pack(_x.grasp_id, _x.successes, _x.attempts))
        _v216 = val1.marker
        _v217 = _v216.header
        _x = _v217.seq
        buff.write(_get_struct_I().pack(_x))
        _v218 = _v217.stamp
        _x = _v218
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v217.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v216.ns
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v216
        buff.write(_get_struct_3i().pack(_x.id, _x.type, _x.action))
        _v219 = _v216.pose
        _v220 = _v219.position
        _x = _v220
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v221 = _v219.orientation
        _x = _v221
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v222 = _v216.scale
        _x = _v222
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v223 = _v216.color
        _x = _v223
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _v224 = _v216.lifetime
        _x = _v224
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = _v216.frame_locked
        buff.write(_get_struct_B().pack(_x))
        length = len(_v216.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v216.points:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v216.colors)
        buff.write(_struct_I.pack(length))
        for val3 in _v216.colors:
          _x = val3
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        _x = _v216.text
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v216.mesh_resource
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v216.mesh_use_embedded_materials
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.image_indices)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.image_indices.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.segmented_objects is None:
        self.segmented_objects = rail_manipulation_msgs.msg.SegmentedObjectList()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.segmented_objects.header.seq, _x.segmented_objects.header.stamp.secs, _x.segmented_objects.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.segmented_objects.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.segmented_objects.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.segmented_objects.cleared,) = _get_struct_B().unpack(str[start:end])
      self.segmented_objects.cleared = bool(self.segmented_objects.cleared)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.segmented_objects.objects = []
      for i in range(0, length):
        val1 = rail_manipulation_msgs.msg.SegmentedObject()
        _v225 = val1.point_cloud
        _v226 = _v225.header
        start = end
        end += 4
        (_v226.seq,) = _get_struct_I().unpack(str[start:end])
        _v227 = _v226.stamp
        _x = _v227
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v226.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v226.frame_id = str[start:end]
        _x = _v225
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v225.fields = []
        for i in range(0, length):
          val3 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.name = str[start:end]
          _x = val3
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
          _v225.fields.append(val3)
        _x = _v225
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _get_struct_B2I().unpack(str[start:end])
        _v225.is_bigendian = bool(_v225.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v225.data = str[start:end]
        start = end
        end += 1
        (_v225.is_dense,) = _get_struct_B().unpack(str[start:end])
        _v225.is_dense = bool(_v225.is_dense)
        _v228 = val1.image
        _v229 = _v228.header
        start = end
        end += 4
        (_v229.seq,) = _get_struct_I().unpack(str[start:end])
        _v230 = _v229.stamp
        _x = _v230
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v229.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v229.frame_id = str[start:end]
        _x = _v228
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v228.encoding = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v228.encoding = str[start:end]
        _x = _v228
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v228.data = str[start:end]
        _v231 = val1.centroid
        _x = _v231
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v232 = val1.center
        _x = _v232
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v233 = val1.bounding_volume
        _v234 = _v233.pose
        _v235 = _v234.header
        start = end
        end += 4
        (_v235.seq,) = _get_struct_I().unpack(str[start:end])
        _v236 = _v235.stamp
        _x = _v236
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v235.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v235.frame_id = str[start:end]
        _v237 = _v234.pose
        _v238 = _v237.position
        _x = _v238
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v239 = _v237.orientation
        _x = _v239
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v240 = _v233.dimensions
        _x = _v240
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.width, _x.depth, _x.height,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.rgb = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.cielab = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v241 = val1.orientation
        _x = _v241
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 1
        (val1.recognized,) = _get_struct_B().unpack(str[start:end])
        val1.recognized = bool(val1.recognized)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.model_id, _x.confidence,) = _get_struct_Id().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.grasps = []
        for i in range(0, length):
          val2 = rail_manipulation_msgs.msg.Grasp()
          _v242 = val2.grasp_pose
          _v243 = _v242.header
          start = end
          end += 4
          (_v243.seq,) = _get_struct_I().unpack(str[start:end])
          _v244 = _v243.stamp
          _x = _v244
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v243.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v243.frame_id = str[start:end]
          _v245 = _v242.pose
          _v246 = _v245.position
          _x = _v246
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v247 = _v245.orientation
          _x = _v247
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.eef_frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.eef_frame_id = str[start:end]
          _x = val2
          start = end
          end += 12
          (_x.grasp_id, _x.successes, _x.attempts,) = _get_struct_3I().unpack(str[start:end])
          val1.grasps.append(val2)
        _v248 = val1.marker
        _v249 = _v248.header
        start = end
        end += 4
        (_v249.seq,) = _get_struct_I().unpack(str[start:end])
        _v250 = _v249.stamp
        _x = _v250
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v249.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v249.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v248.ns = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v248.ns = str[start:end]
        _x = _v248
        start = end
        end += 12
        (_x.id, _x.type, _x.action,) = _get_struct_3i().unpack(str[start:end])
        _v251 = _v248.pose
        _v252 = _v251.position
        _x = _v252
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v253 = _v251.orientation
        _x = _v253
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v254 = _v248.scale
        _x = _v254
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v255 = _v248.color
        _x = _v255
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        _v256 = _v248.lifetime
        _x = _v256
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 1
        (_v248.frame_locked,) = _get_struct_B().unpack(str[start:end])
        _v248.frame_locked = bool(_v248.frame_locked)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v248.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v248.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v248.colors = []
        for i in range(0, length):
          val3 = std_msgs.msg.ColorRGBA()
          _x = val3
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          _v248.colors.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v248.text = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v248.text = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v248.mesh_resource = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v248.mesh_resource = str[start:end]
        start = end
        end += 1
        (_v248.mesh_use_embedded_materials,) = _get_struct_B().unpack(str[start:end])
        _v248.mesh_use_embedded_materials = bool(_v248.mesh_use_embedded_materials)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.image_indices = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        self.segmented_objects.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_IBI = None
def _get_struct_IBI():
    global _struct_IBI
    if _struct_IBI is None:
        _struct_IBI = struct.Struct("<IBI")
    return _struct_IBI
_struct_Id = None
def _get_struct_Id():
    global _struct_Id
    if _struct_Id is None:
        _struct_Id = struct.Struct("<Id")
    return _struct_Id
class ProcessSegmentedObjects(object):
  _type          = 'rail_manipulation_msgs/ProcessSegmentedObjects'
  _md5sum = '9087dd6d41640e91495dd2e88006db15'
  _request_class  = ProcessSegmentedObjectsRequest
  _response_class = ProcessSegmentedObjectsResponse
